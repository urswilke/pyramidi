[{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Urs Wilke Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/compose.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Composing from R","text":"‚Äôll load libraries R: First, just load package midi file scaffolding put notes : compose data generating dataframe one example midi file.  measure time b_note_on b_note_off absolute times (quarter notes) notes played. sf2 soundfonts midi channel 10 (channel 9 pythonista world :) usually used drums. Let‚Äôs try . 36 bass drum 38 snare  ‚Äôll just define small helper function calculate absolute midi ticks passed time measured beats, generate format save data midi need calculate relative time increments ticks. Ok ready pass modified notes MidiFramer object listen drums first composition: Now ‚Äôll add notes. Channel 1 grand piano. play major chords define 4 notes chord played time: starting times used define notes dataframe.  small helper function, can change notes played depending measure ‚Äôre : join drum notes dataframes together: can apply : play : Let‚Äôs rock! ü§üü•≥","code":"library(pyramidi) library(tidyr) library(dplyr) library(purrr) library(forcats) library(details) midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_string) mfr$df_notes_wide %>% kable() | i_track|meta  | note| channel| i_note| velocity_note_on| velocity_note_off| ticks_note_on| ticks_note_off|  b_note_on| b_note_off| |-------:|:-----|----:|-------:|------:|----------------:|-----------------:|-------------:|--------------:|----------:|----------:| |       0|FALSE |   43|       9|      1|               72|                72|             0|            240|  0.0000000|   1.000000| |       0|FALSE |   39|       9|      1|               64|                64|             0|            240|  0.0000000|   1.000000| |       0|FALSE |   36|       9|      1|              101|               101|             0|            240|  0.0000000|   1.000000| |       0|FALSE |   42|       9|      1|              101|               101|           480|            720|  2.0000000|   3.000000| |       0|FALSE |   38|       9|      1|              101|               101|           480|            720|  2.0000000|   3.000000| |       0|FALSE |   43|       9|      2|               64|                64|           720|            960|  3.0000000|   4.000000| |       0|FALSE |   36|       9|      2|              101|               101|           960|           1200|  4.0000000|   5.000000| |       0|FALSE |   43|       9|      3|               60|                60|          1440|           1680|  6.0000000|   7.000000| |       0|FALSE |   42|       9|      2|              101|               101|          1440|           1680|  6.0000000|   7.000000| |       0|FALSE |   43|       9|      4|               60|                60|          1920|           2160|  8.0000000|   9.000000| |       0|FALSE |   39|       9|      2|               66|                66|          1920|           2160|  8.0000000|   9.000000| |       0|FALSE |   36|       9|      3|              101|               101|          1920|           2160|  8.0000000|   9.000000| |       0|FALSE |   42|       9|      3|              101|               101|          2400|           2640| 10.0000000|  11.000000| |       0|FALSE |   38|       9|      2|              101|               101|          2400|           2640| 10.0000000|  11.000000| |       0|FALSE |   43|       9|      5|               53|                53|          2640|           2880| 11.0000000|  12.000000| |       0|FALSE |   36|       9|      4|              101|               101|          2880|           3120| 12.0000000|  13.000000| |       0|FALSE |   43|       9|      6|               52|                52|          3360|           3600| 14.0000000|  15.000000| |       0|FALSE |   42|       9|      4|               66|                66|          3360|           3600| 14.0000000|  15.000000| |       0|FALSE |   43|       9|      7|               72|                72|          3840|           4080| 16.0000000|  17.000000| |       0|FALSE |   39|       9|      3|               64|                64|          3840|           4080| 16.0000000|  17.000000| |       0|FALSE |   36|       9|      5|              101|               101|          3840|           4080| 16.0000000|  17.000000| |       0|FALSE |   42|       9|      5|              101|               101|          4320|           4560| 18.0000000|  19.000000| |       0|FALSE |   38|       9|      3|              101|               101|          4320|           4560| 18.0000000|  19.000000| |       0|FALSE |   43|       9|      8|               64|                64|          4560|           4800| 19.0000000|  20.000000| |       0|FALSE |   36|       9|      6|              101|               101|          4800|           5040| 20.0000000|  21.000000| |       0|FALSE |   43|       9|      9|               60|                60|          5280|           5520| 22.0000000|  23.000000| |       0|FALSE |   42|       9|      6|              101|               101|          5280|           5520| 22.0000000|  23.000000| |       0|FALSE |   43|       9|     10|               60|                60|          5760|           6000| 24.0000000|  25.000000| |       0|FALSE |   39|       9|      4|               66|                66|          5760|           6000| 24.0000000|  25.000000| |       0|FALSE |   36|       9|      7|              101|               101|          5760|           6000| 24.0000000|  25.000000| |       0|FALSE |   42|       9|      7|              101|               101|          6240|           6480| 26.0000000|  27.000000| |       0|FALSE |   38|       9|      4|              101|               101|          6240|           6480| 26.0000000|  27.000000| |       0|FALSE |   43|       9|     11|               53|                53|          6480|           6720| 27.0000000|  28.000000| |       0|FALSE |   36|       9|      8|              101|               101|          6720|           6960| 28.0000000|  29.000000| |       0|FALSE |   43|       9|     12|               52|                52|          7200|           7440| 30.0000000|  31.000000| |       0|FALSE |   42|       9|      8|               66|                66|          7200|           7440| 30.0000000|  31.000000| |       0|FALSE |   43|       9|     13|               72|                72|          7680|           7920| 32.0000000|  33.000000| |       0|FALSE |   39|       9|      5|               64|                64|          7680|           7920| 32.0000000|  33.000000| |       0|FALSE |   36|       9|      9|              101|               101|          7680|           7920| 32.0000000|  33.000000| |       0|FALSE |   42|       9|      9|              101|               101|          8160|           8400| 34.0000000|  35.000000| |       0|FALSE |   38|       9|      5|              101|               101|          8160|           8400| 34.0000000|  35.000000| |       0|FALSE |   43|       9|     14|               64|                64|          8400|           8640| 35.0000000|  36.000000| |       0|FALSE |   36|       9|     10|              101|               101|          8640|           8880| 36.0000000|  37.000000| |       0|FALSE |   43|       9|     15|               60|                60|          9120|           9360| 38.0000000|  39.000000| |       0|FALSE |   42|       9|     10|              101|               101|          9120|           9360| 38.0000000|  39.000000| |       0|FALSE |   43|       9|     16|               60|                60|          9600|           9840| 40.0000000|  41.000000| |       0|FALSE |   39|       9|      6|               66|                66|          9600|           9840| 40.0000000|  41.000000| |       0|FALSE |   36|       9|     11|              101|               101|          9600|           9840| 40.0000000|  41.000000| |       0|FALSE |   42|       9|     11|              101|               101|         10080|          10320| 42.0000000|  43.000000| |       0|FALSE |   38|       9|      6|              101|               101|         10080|          10320| 42.0000000|  43.000000| |       0|FALSE |   43|       9|     17|               53|                53|         10320|          10560| 43.0000000|  44.000000| |       0|FALSE |   36|       9|     12|              101|               101|         10560|          10800| 44.0000000|  45.000000| |       0|FALSE |   43|       9|     18|               52|                52|         11040|          11280| 46.0000000|  47.000000| |       0|FALSE |   42|       9|     12|               66|                66|         11040|          11280| 46.0000000|  47.000000| |       0|FALSE |   43|       9|     19|               81|                81|         11520|          11760| 48.0000000|  49.000000| |       0|FALSE |   36|       9|     13|              101|               101|         11520|          11760| 48.0000000|  49.000000| |       0|FALSE |   42|       9|     13|              101|               101|         12000|          12240| 50.0000000|  51.000000| |       0|FALSE |   39|       9|      7|               57|                57|         12000|          12240| 50.0000000|  51.000000| |       0|FALSE |   38|       9|      7|              101|               101|         12000|          12240| 50.0000000|  51.000000| |       0|FALSE |   43|       9|     20|               60|                60|         12240|          12480| 51.0000000|  52.000000| |       0|FALSE |   36|       9|     14|              101|               101|         12480|          12720| 52.0000000|  53.000000| |       0|FALSE |   43|       9|     21|               66|                66|         12960|          13200| 54.0000000|  55.000000| |       0|FALSE |   42|       9|     14|              101|               101|         12960|          13200| 54.0000000|  55.000000| |       0|FALSE |   43|       9|     22|               66|                66|         13440|          13680| 56.0000000|  57.000000| |       0|FALSE |   36|       9|     15|              101|               101|         13440|          13680| 56.0000000|  57.000000| |       0|FALSE |   46|       9|      1|               81|                81|         13920|          14160| 58.0000000|  59.000000| |       0|FALSE |   45|       9|      1|               67|                67|         13920|          14160| 58.0000000|  59.000000| |       0|FALSE |   39|       9|      8|               60|                60|         13920|          14160| 58.0000000|  59.000000| |       0|FALSE |   38|       9|      8|              101|               101|         13920|          14160| 58.0000000|  59.000000| |       0|FALSE |   39|       9|      9|               59|                59|         14400|          14640| 60.0000000|  61.000000| |       0|FALSE |   36|       9|     16|              101|               101|         14400|          14640| 60.0000000|  61.000000| |       0|FALSE |   39|       9|     10|               55|                55|         14640|          14880| 61.0000000|  62.000000| |       0|FALSE |   45|       9|      2|               63|                63|         14880|          15120| 62.0000000|  63.000000| |       0|FALSE |   43|       9|     23|               52|                52|         14880|          15120| 62.0000000|  63.000000| |       0|FALSE |   42|       9|     15|              101|               101|         14880|          15120| 62.0000000|  63.000000| |       0|FALSE |   39|       9|     11|               55|                55|         14880|          15120| 62.0000000|  63.000000| |       0|FALSE |   42|       9|     16|               59|                59|         15120|          15360| 63.0000000|  64.000000| |       0|FALSE |   39|       9|     12|               57|                57|         15120|          15360| 63.0000000|  64.000000| |       1|FALSE |   50|      15|      1|               82|                82|             0|            240|  0.0000000|   1.000000| |       1|FALSE |   45|      15|      1|               85|                85|          3240|           3840| 13.5000000|  16.000000| |       1|FALSE |   50|      15|      2|               81|                81|          3840|           4080| 16.0000000|  17.000000| |       1|FALSE |   45|      15|      2|               69|                69|          7200|           7680| 30.0000000|  32.000000| |       1|FALSE |   50|      15|      3|               69|                69|          7680|           8040| 32.0000000|  33.500000| |       1|FALSE |   45|      15|      3|               82|                82|         10440|          11400| 43.5000000|  47.500000| |       1|FALSE |   50|      15|      4|               72|                72|         11520|          12600| 48.0000000|  52.500000| |       1|FALSE |   57|      15|      1|               79|                79|         12960|          13440| 54.0000000|  56.000000| |       1|FALSE |   55|      15|      1|               50|                50|         13440|          13920| 56.0000000|  58.000000| |       1|FALSE |   53|      15|      1|               73|                73|         13920|          14400| 58.0000000|  60.000000| |       1|FALSE |   52|      15|      1|               69|                69|         14400|          14880| 60.0000000|  62.000000| |       1|FALSE |   48|      15|      1|               85|                85|         14880|          15360| 62.0000000|  64.000000| |       2|FALSE |   62|      15|      1|               78|                78|            54|            369|  0.2250000|   1.537500| |       2|FALSE |   57|      15|      1|               78|                78|            64|            424|  0.2666667|   1.766667| |       2|FALSE |   65|      15|      1|               72|                72|            70|            353|  0.2916667|   1.470833| |       2|FALSE |   62|      15|      2|               57|                57|          1473|           3150|  6.1375000|  13.125000| |       2|FALSE |   57|      15|      2|               53|                53|          1482|           3197|  6.1750000|  13.320833| |       2|FALSE |   65|      15|      2|               58|                58|          1490|           3142|  6.2083333|  13.091667| |       2|FALSE |   62|      15|      3|               61|                61|          3339|           3544| 13.9125000|  14.766667| |       2|FALSE |   57|      15|      3|               53|                53|          3348|           3576| 13.9500000|  14.900000| |       2|FALSE |   65|      15|      3|               58|                58|          3356|           3552| 13.9833333|  14.800000| |       2|FALSE |   62|      15|      4|               47|                47|          3851|           4471| 16.0458333|  18.629167| |       2|FALSE |   57|      15|      4|               42|                42|          3859|           4590| 16.0791667|  19.125000| |       2|FALSE |   65|      15|      4|               46|                46|          3868|           4205| 16.1166667|  17.520833| |       2|FALSE |   62|      15|      5|               56|                56|          5247|           6939| 21.8625000|  28.912500| |       2|FALSE |   57|      15|      5|               53|                53|          5256|           6963| 21.9000000|  29.012500| |       2|FALSE |   65|      15|      5|               58|                58|          5264|           6915| 21.9333333|  28.812500| |       2|FALSE |   62|      15|      6|               49|                49|          7136|           7443| 29.7333333|  31.012500| |       2|FALSE |   57|      15|      6|               42|                42|          7145|           7467| 29.7708333|  31.112500| |       2|FALSE |   65|      15|      6|               49|                49|          7153|           7419| 29.8041667|  30.912500| |       2|FALSE |   62|      15|      7|               37|                37|          7679|           8018| 31.9958333|  33.408333| |       2|FALSE |   57|      15|      7|               34|                34|          7688|           8097| 32.0333333|  33.737500| |       2|FALSE |   65|      15|      7|               51|                51|          7696|           8010| 32.0666667|  33.375000| |       2|FALSE |   57|      15|      8|               58|                58|          9115|          10956| 37.9791667|  45.650000| |       2|FALSE |   62|      15|      8|               60|                60|          9123|          10885| 38.0125000|  45.354167| |       2|FALSE |   65|      15|      8|               56|                56|          9131|          10877| 38.0458333|  45.320833| |       2|FALSE |   62|      15|      9|               50|                50|         11403|          11850| 47.5125000|  49.375000| |       2|FALSE |   57|      15|      9|               40|                40|         11411|          11929| 47.5458333|  49.704167| |       2|FALSE |   65|      15|      9|               52|                52|         11419|          11859| 47.5791667|  49.412500| |       2|FALSE |   62|      15|     10|               63|                63|         12846|          13114| 53.5250000|  54.641667| |       2|FALSE |   59|      15|      1|               69|                69|         12854|          13145| 53.5583333|  54.770833| |       2|FALSE |   67|      15|      1|               58|                58|         12862|          13122| 53.5916667|  54.675000| |       2|FALSE |   59|      15|      2|               58|                58|         13413|          14088| 55.8875000|  58.700000| |       2|FALSE |   62|      15|     11|               58|                58|         13421|          14016| 55.9208333|  58.400000| |       2|FALSE |   67|      15|      2|               58|                58|         13429|          14025| 55.9541667|  58.437500| |       2|FALSE |   59|      15|      3|               52|                52|         14175|          14522| 59.0625000|  60.508333| |       2|FALSE |   67|      15|      3|               60|                60|         14183|          14474| 59.0958333|  60.308333| |       2|FALSE |   62|      15|     12|               65|                65|         14191|          14442| 59.1291667|  60.175000| |       2|FALSE |   59|      15|      4|               57|                57|         14859|          15080| 61.9125000|  62.833333| |       2|FALSE |   62|      15|     13|               60|                60|         14868|          15049| 61.9500000|  62.704167| |       2|FALSE |   67|      15|      4|               57|                57|         14876|          15089| 61.9833333|  62.870833| |       2|FALSE |   62|      15|     14|               82|                82|         15355|          15360| 63.9791667|  64.000000| n_beats <- 16 ticks_per_beat <- 960L drum <- tibble(   i_track = 0,   meta = FALSE,   # This is just a repetition of a classical rock beat:   note = rep(c(36, 38), n_beats / 2),   channel = 9,   i_note = 1:n_beats,   velocity_note_on = 100,   velocity_note_off = 0,   b_note_on = 0:(n_beats-1),   b_note_off = b_note_on + 1 / 2, ) drum %>% kable() | i_track|meta  | note| channel| i_note| velocity_note_on| velocity_note_off| b_note_on| b_note_off| |-------:|:-----|----:|-------:|------:|----------------:|-----------------:|---------:|----------:| |       0|FALSE |   36|       9|      1|              100|                 0|         0|        0.5| |       0|FALSE |   38|       9|      2|              100|                 0|         1|        1.5| |       0|FALSE |   36|       9|      3|              100|                 0|         2|        2.5| |       0|FALSE |   38|       9|      4|              100|                 0|         3|        3.5| |       0|FALSE |   36|       9|      5|              100|                 0|         4|        4.5| |       0|FALSE |   38|       9|      6|              100|                 0|         5|        5.5| |       0|FALSE |   36|       9|      7|              100|                 0|         6|        6.5| |       0|FALSE |   38|       9|      8|              100|                 0|         7|        7.5| |       0|FALSE |   36|       9|      9|              100|                 0|         8|        8.5| |       0|FALSE |   38|       9|     10|              100|                 0|         9|        9.5| |       0|FALSE |   36|       9|     11|              100|                 0|        10|       10.5| |       0|FALSE |   38|       9|     12|              100|                 0|        11|       11.5| |       0|FALSE |   36|       9|     13|              100|                 0|        12|       12.5| |       0|FALSE |   38|       9|     14|              100|                 0|        13|       13.5| |       0|FALSE |   36|       9|     15|              100|                 0|        14|       14.5| |       0|FALSE |   38|       9|     16|              100|                 0|        15|       15.5| beats_to_ticks <- function(notes_wide) {   notes_wide %>%     mutate(       ticks_note_on  = b_note_on  * ticks_per_beat,       ticks_note_off = b_note_off * ticks_per_beat     ) } mfr$update_notes_wide(beats_to_ticks(drum)) mfr$play(\"drum.mp3\") (b_note_on = (0:(n_beats-1) %/% 4) * 4) #>  [1]  0  0  0  0  4  4  4  4  8  8  8  8 12 12 12 12 notes <- tibble(   i_track = 0,   meta = FALSE,   note = rep(c(60, 64, 67, 72), n_beats / 4),   channel = 0,   i_note = 1:n_beats,   velocity_note_on = 100,   velocity_note_off = 0,   b_note_on = b_note_on,   b_note_off = b_note_on + 1 * 2, ) notes %>% kable() | i_track|meta  | note| channel| i_note| velocity_note_on| velocity_note_off| b_note_on| b_note_off| |-------:|:-----|----:|-------:|------:|----------------:|-----------------:|---------:|----------:| |       0|FALSE |   60|       0|      1|              100|                 0|         0|          2| |       0|FALSE |   64|       0|      2|              100|                 0|         0|          2| |       0|FALSE |   67|       0|      3|              100|                 0|         0|          2| |       0|FALSE |   72|       0|      4|              100|                 0|         0|          2| |       0|FALSE |   60|       0|      5|              100|                 0|         4|          6| |       0|FALSE |   64|       0|      6|              100|                 0|         4|          6| |       0|FALSE |   67|       0|      7|              100|                 0|         4|          6| |       0|FALSE |   72|       0|      8|              100|                 0|         4|          6| |       0|FALSE |   60|       0|      9|              100|                 0|         8|         10| |       0|FALSE |   64|       0|     10|              100|                 0|         8|         10| |       0|FALSE |   67|       0|     11|              100|                 0|         8|         10| |       0|FALSE |   72|       0|     12|              100|                 0|         8|         10| |       0|FALSE |   60|       0|     13|              100|                 0|        12|         14| |       0|FALSE |   64|       0|     14|              100|                 0|        12|         14| |       0|FALSE |   67|       0|     15|              100|                 0|        12|         14| |       0|FALSE |   72|       0|     16|              100|                 0|        12|         14| # We play the tonic for 2 bars,    # and the subdominant (+5) and dominant (+7) for one each: change_notes_on_measures <- function(notes) {   notes %>%      mutate(       note = case_when(         floor(b_note_on/4) %% 4 == 0 ~ note,          floor(b_note_on/4) %% 4 == 1 ~ note,          floor(b_note_on/4) %% 4 == 2 ~ note + 5,          floor(b_note_on/4) %% 4 == 3 ~ note + 7        )     ) }  notes <- notes %>%    change_notes_on_measures() midi_note_events_wide <- bind_rows(drum, notes) %>% beats_to_ticks() mfr$update_notes_wide(midi_note_events_wide) mfr$play(\"combine.mp3\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/compose.html","id":"write-functions-to-compose-midi-frames","dir":"Articles","previous_headings":"","what":"Write functions to compose midi frames","title":"Composing from R","text":"Instead defining whole dataframe section , ‚Äôll now write small helper function writing single notes needed dataframe format: outputs one line dataframe midi note vector. ‚Äôll design repeating bass pattern C major chord:  order avoid repetitive typing ‚Äôll also define small helper function chords: Now can pass list chord vectors function. ‚Äôll repeat C major chord:  frame :  Now let‚Äôs write simple rising arpeggiatator function:  can concatenate different parts one dataframe also changing chords played small function change_notes_on_measures():","code":"frame_notes <- function(   b,   dur,   note,   velocity = 100,   channel = 0,   i_track = 0,   meta = FALSE,   velocity_note_off = 0,   ... ) {   tibble(     i_track = i_track,     meta = meta,     note = note,     channel = channel,     velocity_note_on = velocity,     velocity_note_off = velocity_note_off,     b_note_on = b,     b_note_off = b + dur,   ) } bass <- frame_notes(   b = 1:n_beats - 1 + 0.5,    dur = 1,    note = rep(c(36, 43, 41, 48), n_beats / 4) ) bass %>% kable() | i_track|meta  | note| channel| velocity_note_on| velocity_note_off| b_note_on| b_note_off| |-------:|:-----|----:|-------:|----------------:|-----------------:|---------:|----------:| |       0|FALSE |   36|       0|              100|                 0|       0.5|        1.5| |       0|FALSE |   43|       0|              100|                 0|       1.5|        2.5| |       0|FALSE |   41|       0|              100|                 0|       2.5|        3.5| |       0|FALSE |   48|       0|              100|                 0|       3.5|        4.5| |       0|FALSE |   36|       0|              100|                 0|       4.5|        5.5| |       0|FALSE |   43|       0|              100|                 0|       5.5|        6.5| |       0|FALSE |   41|       0|              100|                 0|       6.5|        7.5| |       0|FALSE |   48|       0|              100|                 0|       7.5|        8.5| |       0|FALSE |   36|       0|              100|                 0|       8.5|        9.5| |       0|FALSE |   43|       0|              100|                 0|       9.5|       10.5| |       0|FALSE |   41|       0|              100|                 0|      10.5|       11.5| |       0|FALSE |   48|       0|              100|                 0|      11.5|       12.5| |       0|FALSE |   36|       0|              100|                 0|      12.5|       13.5| |       0|FALSE |   43|       0|              100|                 0|      13.5|       14.5| |       0|FALSE |   41|       0|              100|                 0|      14.5|       15.5| |       0|FALSE |   48|       0|              100|                 0|      15.5|       16.5| frame_chords <- function(...) {   frame_notes(...) %>%      unnest(note) } chords_list <- rep(list(c(60, 64, 67, 72)), n_beats) chords_list [[1]] [1] 60 64 67 72  [[2]] [1] 60 64 67 72  [[3]] [1] 60 64 67 72  [[4]] [1] 60 64 67 72  [[5]] [1] 60 64 67 72  [[6]] [1] 60 64 67 72  [[7]] [1] 60 64 67 72  [[8]] [1] 60 64 67 72  [[9]] [1] 60 64 67 72  [[10]] [1] 60 64 67 72  [[11]] [1] 60 64 67 72  [[12]] [1] 60 64 67 72  [[13]] [1] 60 64 67 72  [[14]] [1] 60 64 67 72  [[15]] [1] 60 64 67 72  [[16]] [1] 60 64 67 72 chords <- frame_chords(   b = 1:n_beats - 1,    dur = 1,   velocity = 70,   note = chords_list ) chords ‚Ä©[38;5;246m# A tibble: 64 √ó 8‚Ä©[39m    i_track meta   note channel velocity_note_on velocity_note_off b_note_on      ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<lgl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m   ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m            ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m             ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m     ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[38;5;250m 1‚Ä©[39m       0 FALSE    60       0               70                 0         0 ‚Ä©[38;5;250m 2‚Ä©[39m       0 FALSE    64       0               70                 0         0 ‚Ä©[38;5;250m 3‚Ä©[39m       0 FALSE    67       0               70                 0         0 ‚Ä©[38;5;250m 4‚Ä©[39m       0 FALSE    72       0               70                 0         0 ‚Ä©[38;5;250m 5‚Ä©[39m       0 FALSE    60       0               70                 0         1 ‚Ä©[38;5;250m 6‚Ä©[39m       0 FALSE    64       0               70                 0         1 ‚Ä©[38;5;250m 7‚Ä©[39m       0 FALSE    67       0               70                 0         1 ‚Ä©[38;5;250m 8‚Ä©[39m       0 FALSE    72       0               70                 0         1 ‚Ä©[38;5;250m 9‚Ä©[39m       0 FALSE    60       0               70                 0         2 ‚Ä©[38;5;250m10‚Ä©[39m       0 FALSE    64       0               70                 0         2 ‚Ä©[38;5;246m# ‚Ñπ 54 more rows‚Ä©[39m ‚Ä©[38;5;246m# ‚Ñπ 1 more variable: b_note_off <dbl>‚Ä©[39m arpeggiate <- function(   b,   chords_list,   dur = 1,   pattern = \"rising\",   n_beat = 4,   octave = 1,   ... ) {   times <- tibble(b) %>%     rowwise() %>%      summarise(c(b + seq(0, 1, length.out = n_beat + 1)[-(n_beat + 1)])) %>%      pull()   notes <-      tibble(temp = chords_list) %>%      unnest(temp) %>%      pull() %>%      {. + octave * 12; .}   frame_notes(     dur = dur/n_beat,     b = times,     note = notes,     ...   )      } arp <- arpeggiate(   b = 1:n_beats - 1,    velocity = 90,   chords_list = chords_list ) #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ‚Ñπ Please use `reframe()` instead. #> ‚Ñπ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. arp %>% kable() | i_track|meta  | note| channel| velocity_note_on| velocity_note_off| b_note_on| b_note_off| |-------:|:-----|----:|-------:|----------------:|-----------------:|---------:|----------:| |       0|FALSE |   60|       0|               90|                 0|      0.00|       0.25| |       0|FALSE |   64|       0|               90|                 0|      0.25|       0.50| |       0|FALSE |   67|       0|               90|                 0|      0.50|       0.75| |       0|FALSE |   72|       0|               90|                 0|      0.75|       1.00| |       0|FALSE |   60|       0|               90|                 0|      1.00|       1.25| |       0|FALSE |   64|       0|               90|                 0|      1.25|       1.50| |       0|FALSE |   67|       0|               90|                 0|      1.50|       1.75| |       0|FALSE |   72|       0|               90|                 0|      1.75|       2.00| |       0|FALSE |   60|       0|               90|                 0|      2.00|       2.25| |       0|FALSE |   64|       0|               90|                 0|      2.25|       2.50| |       0|FALSE |   67|       0|               90|                 0|      2.50|       2.75| |       0|FALSE |   72|       0|               90|                 0|      2.75|       3.00| |       0|FALSE |   60|       0|               90|                 0|      3.00|       3.25| |       0|FALSE |   64|       0|               90|                 0|      3.25|       3.50| |       0|FALSE |   67|       0|               90|                 0|      3.50|       3.75| |       0|FALSE |   72|       0|               90|                 0|      3.75|       4.00| |       0|FALSE |   60|       0|               90|                 0|      4.00|       4.25| |       0|FALSE |   64|       0|               90|                 0|      4.25|       4.50| |       0|FALSE |   67|       0|               90|                 0|      4.50|       4.75| |       0|FALSE |   72|       0|               90|                 0|      4.75|       5.00| |       0|FALSE |   60|       0|               90|                 0|      5.00|       5.25| |       0|FALSE |   64|       0|               90|                 0|      5.25|       5.50| |       0|FALSE |   67|       0|               90|                 0|      5.50|       5.75| |       0|FALSE |   72|       0|               90|                 0|      5.75|       6.00| |       0|FALSE |   60|       0|               90|                 0|      6.00|       6.25| |       0|FALSE |   64|       0|               90|                 0|      6.25|       6.50| |       0|FALSE |   67|       0|               90|                 0|      6.50|       6.75| |       0|FALSE |   72|       0|               90|                 0|      6.75|       7.00| |       0|FALSE |   60|       0|               90|                 0|      7.00|       7.25| |       0|FALSE |   64|       0|               90|                 0|      7.25|       7.50| |       0|FALSE |   67|       0|               90|                 0|      7.50|       7.75| |       0|FALSE |   72|       0|               90|                 0|      7.75|       8.00| |       0|FALSE |   60|       0|               90|                 0|      8.00|       8.25| |       0|FALSE |   64|       0|               90|                 0|      8.25|       8.50| |       0|FALSE |   67|       0|               90|                 0|      8.50|       8.75| |       0|FALSE |   72|       0|               90|                 0|      8.75|       9.00| |       0|FALSE |   60|       0|               90|                 0|      9.00|       9.25| |       0|FALSE |   64|       0|               90|                 0|      9.25|       9.50| |       0|FALSE |   67|       0|               90|                 0|      9.50|       9.75| |       0|FALSE |   72|       0|               90|                 0|      9.75|      10.00| |       0|FALSE |   60|       0|               90|                 0|     10.00|      10.25| |       0|FALSE |   64|       0|               90|                 0|     10.25|      10.50| |       0|FALSE |   67|       0|               90|                 0|     10.50|      10.75| |       0|FALSE |   72|       0|               90|                 0|     10.75|      11.00| |       0|FALSE |   60|       0|               90|                 0|     11.00|      11.25| |       0|FALSE |   64|       0|               90|                 0|     11.25|      11.50| |       0|FALSE |   67|       0|               90|                 0|     11.50|      11.75| |       0|FALSE |   72|       0|               90|                 0|     11.75|      12.00| |       0|FALSE |   60|       0|               90|                 0|     12.00|      12.25| |       0|FALSE |   64|       0|               90|                 0|     12.25|      12.50| |       0|FALSE |   67|       0|               90|                 0|     12.50|      12.75| |       0|FALSE |   72|       0|               90|                 0|     12.75|      13.00| |       0|FALSE |   60|       0|               90|                 0|     13.00|      13.25| |       0|FALSE |   64|       0|               90|                 0|     13.25|      13.50| |       0|FALSE |   67|       0|               90|                 0|     13.50|      13.75| |       0|FALSE |   72|       0|               90|                 0|     13.75|      14.00| |       0|FALSE |   60|       0|               90|                 0|     14.00|      14.25| |       0|FALSE |   64|       0|               90|                 0|     14.25|      14.50| |       0|FALSE |   67|       0|               90|                 0|     14.50|      14.75| |       0|FALSE |   72|       0|               90|                 0|     14.75|      15.00| |       0|FALSE |   60|       0|               90|                 0|     15.00|      15.25| |       0|FALSE |   64|       0|               90|                 0|     15.25|      15.50| |       0|FALSE |   67|       0|               90|                 0|     15.50|      15.75| |       0|FALSE |   72|       0|               90|                 0|     15.75|      16.00| combination <- bind_rows(   # We'll add our note variation    # of a major chord to tonic, subdominant and dominant:   bass %>% change_notes_on_measures(),   chords %>% change_notes_on_measures(),   arp %>% change_notes_on_measures(),   # But not on the drum :)   drum ) %>%    beats_to_ticks() combination %>% kable() | i_track|meta  | note| channel| velocity_note_on| velocity_note_off| b_note_on| b_note_off| i_note| ticks_note_on| ticks_note_off| |-------:|:-----|----:|-------:|----------------:|-----------------:|---------:|----------:|------:|-------------:|--------------:| |       0|FALSE |   36|       0|              100|                 0|      0.50|       1.50|     NA|           480|           1440| |       0|FALSE |   43|       0|              100|                 0|      1.50|       2.50|     NA|          1440|           2400| |       0|FALSE |   41|       0|              100|                 0|      2.50|       3.50|     NA|          2400|           3360| |       0|FALSE |   48|       0|              100|                 0|      3.50|       4.50|     NA|          3360|           4320| |       0|FALSE |   36|       0|              100|                 0|      4.50|       5.50|     NA|          4320|           5280| |       0|FALSE |   43|       0|              100|                 0|      5.50|       6.50|     NA|          5280|           6240| |       0|FALSE |   41|       0|              100|                 0|      6.50|       7.50|     NA|          6240|           7200| |       0|FALSE |   48|       0|              100|                 0|      7.50|       8.50|     NA|          7200|           8160| |       0|FALSE |   41|       0|              100|                 0|      8.50|       9.50|     NA|          8160|           9120| |       0|FALSE |   48|       0|              100|                 0|      9.50|      10.50|     NA|          9120|          10080| |       0|FALSE |   46|       0|              100|                 0|     10.50|      11.50|     NA|         10080|          11040| |       0|FALSE |   53|       0|              100|                 0|     11.50|      12.50|     NA|         11040|          12000| |       0|FALSE |   43|       0|              100|                 0|     12.50|      13.50|     NA|         12000|          12960| |       0|FALSE |   50|       0|              100|                 0|     13.50|      14.50|     NA|         12960|          13920| |       0|FALSE |   48|       0|              100|                 0|     14.50|      15.50|     NA|         13920|          14880| |       0|FALSE |   55|       0|              100|                 0|     15.50|      16.50|     NA|         14880|          15840| |       0|FALSE |   60|       0|               70|                 0|      0.00|       1.00|     NA|             0|            960| |       0|FALSE |   64|       0|               70|                 0|      0.00|       1.00|     NA|             0|            960| |       0|FALSE |   67|       0|               70|                 0|      0.00|       1.00|     NA|             0|            960| |       0|FALSE |   72|       0|               70|                 0|      0.00|       1.00|     NA|             0|            960| |       0|FALSE |   60|       0|               70|                 0|      1.00|       2.00|     NA|           960|           1920| |       0|FALSE |   64|       0|               70|                 0|      1.00|       2.00|     NA|           960|           1920| |       0|FALSE |   67|       0|               70|                 0|      1.00|       2.00|     NA|           960|           1920| |       0|FALSE |   72|       0|               70|                 0|      1.00|       2.00|     NA|           960|           1920| |       0|FALSE |   60|       0|               70|                 0|      2.00|       3.00|     NA|          1920|           2880| |       0|FALSE |   64|       0|               70|                 0|      2.00|       3.00|     NA|          1920|           2880| |       0|FALSE |   67|       0|               70|                 0|      2.00|       3.00|     NA|          1920|           2880| |       0|FALSE |   72|       0|               70|                 0|      2.00|       3.00|     NA|          1920|           2880| |       0|FALSE |   60|       0|               70|                 0|      3.00|       4.00|     NA|          2880|           3840| |       0|FALSE |   64|       0|               70|                 0|      3.00|       4.00|     NA|          2880|           3840| |       0|FALSE |   67|       0|               70|                 0|      3.00|       4.00|     NA|          2880|           3840| |       0|FALSE |   72|       0|               70|                 0|      3.00|       4.00|     NA|          2880|           3840| |       0|FALSE |   60|       0|               70|                 0|      4.00|       5.00|     NA|          3840|           4800| |       0|FALSE |   64|       0|               70|                 0|      4.00|       5.00|     NA|          3840|           4800| |       0|FALSE |   67|       0|               70|                 0|      4.00|       5.00|     NA|          3840|           4800| |       0|FALSE |   72|       0|               70|                 0|      4.00|       5.00|     NA|          3840|           4800| |       0|FALSE |   60|       0|               70|                 0|      5.00|       6.00|     NA|          4800|           5760| |       0|FALSE |   64|       0|               70|                 0|      5.00|       6.00|     NA|          4800|           5760| |       0|FALSE |   67|       0|               70|                 0|      5.00|       6.00|     NA|          4800|           5760| |       0|FALSE |   72|       0|               70|                 0|      5.00|       6.00|     NA|          4800|           5760| |       0|FALSE |   60|       0|               70|                 0|      6.00|       7.00|     NA|          5760|           6720| |       0|FALSE |   64|       0|               70|                 0|      6.00|       7.00|     NA|          5760|           6720| |       0|FALSE |   67|       0|               70|                 0|      6.00|       7.00|     NA|          5760|           6720| |       0|FALSE |   72|       0|               70|                 0|      6.00|       7.00|     NA|          5760|           6720| |       0|FALSE |   60|       0|               70|                 0|      7.00|       8.00|     NA|          6720|           7680| |       0|FALSE |   64|       0|               70|                 0|      7.00|       8.00|     NA|          6720|           7680| |       0|FALSE |   67|       0|               70|                 0|      7.00|       8.00|     NA|          6720|           7680| |       0|FALSE |   72|       0|               70|                 0|      7.00|       8.00|     NA|          6720|           7680| |       0|FALSE |   65|       0|               70|                 0|      8.00|       9.00|     NA|          7680|           8640| |       0|FALSE |   69|       0|               70|                 0|      8.00|       9.00|     NA|          7680|           8640| |       0|FALSE |   72|       0|               70|                 0|      8.00|       9.00|     NA|          7680|           8640| |       0|FALSE |   77|       0|               70|                 0|      8.00|       9.00|     NA|          7680|           8640| |       0|FALSE |   65|       0|               70|                 0|      9.00|      10.00|     NA|          8640|           9600| |       0|FALSE |   69|       0|               70|                 0|      9.00|      10.00|     NA|          8640|           9600| |       0|FALSE |   72|       0|               70|                 0|      9.00|      10.00|     NA|          8640|           9600| |       0|FALSE |   77|       0|               70|                 0|      9.00|      10.00|     NA|          8640|           9600| |       0|FALSE |   65|       0|               70|                 0|     10.00|      11.00|     NA|          9600|          10560| |       0|FALSE |   69|       0|               70|                 0|     10.00|      11.00|     NA|          9600|          10560| |       0|FALSE |   72|       0|               70|                 0|     10.00|      11.00|     NA|          9600|          10560| |       0|FALSE |   77|       0|               70|                 0|     10.00|      11.00|     NA|          9600|          10560| |       0|FALSE |   65|       0|               70|                 0|     11.00|      12.00|     NA|         10560|          11520| |       0|FALSE |   69|       0|               70|                 0|     11.00|      12.00|     NA|         10560|          11520| |       0|FALSE |   72|       0|               70|                 0|     11.00|      12.00|     NA|         10560|          11520| |       0|FALSE |   77|       0|               70|                 0|     11.00|      12.00|     NA|         10560|          11520| |       0|FALSE |   67|       0|               70|                 0|     12.00|      13.00|     NA|         11520|          12480| |       0|FALSE |   71|       0|               70|                 0|     12.00|      13.00|     NA|         11520|          12480| |       0|FALSE |   74|       0|               70|                 0|     12.00|      13.00|     NA|         11520|          12480| |       0|FALSE |   79|       0|               70|                 0|     12.00|      13.00|     NA|         11520|          12480| |       0|FALSE |   67|       0|               70|                 0|     13.00|      14.00|     NA|         12480|          13440| |       0|FALSE |   71|       0|               70|                 0|     13.00|      14.00|     NA|         12480|          13440| |       0|FALSE |   74|       0|               70|                 0|     13.00|      14.00|     NA|         12480|          13440| |       0|FALSE |   79|       0|               70|                 0|     13.00|      14.00|     NA|         12480|          13440| |       0|FALSE |   67|       0|               70|                 0|     14.00|      15.00|     NA|         13440|          14400| |       0|FALSE |   71|       0|               70|                 0|     14.00|      15.00|     NA|         13440|          14400| |       0|FALSE |   74|       0|               70|                 0|     14.00|      15.00|     NA|         13440|          14400| |       0|FALSE |   79|       0|               70|                 0|     14.00|      15.00|     NA|         13440|          14400| |       0|FALSE |   67|       0|               70|                 0|     15.00|      16.00|     NA|         14400|          15360| |       0|FALSE |   71|       0|               70|                 0|     15.00|      16.00|     NA|         14400|          15360| |       0|FALSE |   74|       0|               70|                 0|     15.00|      16.00|     NA|         14400|          15360| |       0|FALSE |   79|       0|               70|                 0|     15.00|      16.00|     NA|         14400|          15360| |       0|FALSE |   60|       0|               90|                 0|      0.00|       0.25|     NA|             0|            240| |       0|FALSE |   64|       0|               90|                 0|      0.25|       0.50|     NA|           240|            480| |       0|FALSE |   67|       0|               90|                 0|      0.50|       0.75|     NA|           480|            720| |       0|FALSE |   72|       0|               90|                 0|      0.75|       1.00|     NA|           720|            960| |       0|FALSE |   60|       0|               90|                 0|      1.00|       1.25|     NA|           960|           1200| |       0|FALSE |   64|       0|               90|                 0|      1.25|       1.50|     NA|          1200|           1440| |       0|FALSE |   67|       0|               90|                 0|      1.50|       1.75|     NA|          1440|           1680| |       0|FALSE |   72|       0|               90|                 0|      1.75|       2.00|     NA|          1680|           1920| |       0|FALSE |   60|       0|               90|                 0|      2.00|       2.25|     NA|          1920|           2160| |       0|FALSE |   64|       0|               90|                 0|      2.25|       2.50|     NA|          2160|           2400| |       0|FALSE |   67|       0|               90|                 0|      2.50|       2.75|     NA|          2400|           2640| |       0|FALSE |   72|       0|               90|                 0|      2.75|       3.00|     NA|          2640|           2880| |       0|FALSE |   60|       0|               90|                 0|      3.00|       3.25|     NA|          2880|           3120| |       0|FALSE |   64|       0|               90|                 0|      3.25|       3.50|     NA|          3120|           3360| |       0|FALSE |   67|       0|               90|                 0|      3.50|       3.75|     NA|          3360|           3600| |       0|FALSE |   72|       0|               90|                 0|      3.75|       4.00|     NA|          3600|           3840| |       0|FALSE |   60|       0|               90|                 0|      4.00|       4.25|     NA|          3840|           4080| |       0|FALSE |   64|       0|               90|                 0|      4.25|       4.50|     NA|          4080|           4320| |       0|FALSE |   67|       0|               90|                 0|      4.50|       4.75|     NA|          4320|           4560| |       0|FALSE |   72|       0|               90|                 0|      4.75|       5.00|     NA|          4560|           4800| |       0|FALSE |   60|       0|               90|                 0|      5.00|       5.25|     NA|          4800|           5040| |       0|FALSE |   64|       0|               90|                 0|      5.25|       5.50|     NA|          5040|           5280| |       0|FALSE |   67|       0|               90|                 0|      5.50|       5.75|     NA|          5280|           5520| |       0|FALSE |   72|       0|               90|                 0|      5.75|       6.00|     NA|          5520|           5760| |       0|FALSE |   60|       0|               90|                 0|      6.00|       6.25|     NA|          5760|           6000| |       0|FALSE |   64|       0|               90|                 0|      6.25|       6.50|     NA|          6000|           6240| |       0|FALSE |   67|       0|               90|                 0|      6.50|       6.75|     NA|          6240|           6480| |       0|FALSE |   72|       0|               90|                 0|      6.75|       7.00|     NA|          6480|           6720| |       0|FALSE |   60|       0|               90|                 0|      7.00|       7.25|     NA|          6720|           6960| |       0|FALSE |   64|       0|               90|                 0|      7.25|       7.50|     NA|          6960|           7200| |       0|FALSE |   67|       0|               90|                 0|      7.50|       7.75|     NA|          7200|           7440| |       0|FALSE |   72|       0|               90|                 0|      7.75|       8.00|     NA|          7440|           7680| |       0|FALSE |   65|       0|               90|                 0|      8.00|       8.25|     NA|          7680|           7920| |       0|FALSE |   69|       0|               90|                 0|      8.25|       8.50|     NA|          7920|           8160| |       0|FALSE |   72|       0|               90|                 0|      8.50|       8.75|     NA|          8160|           8400| |       0|FALSE |   77|       0|               90|                 0|      8.75|       9.00|     NA|          8400|           8640| |       0|FALSE |   65|       0|               90|                 0|      9.00|       9.25|     NA|          8640|           8880| |       0|FALSE |   69|       0|               90|                 0|      9.25|       9.50|     NA|          8880|           9120| |       0|FALSE |   72|       0|               90|                 0|      9.50|       9.75|     NA|          9120|           9360| |       0|FALSE |   77|       0|               90|                 0|      9.75|      10.00|     NA|          9360|           9600| |       0|FALSE |   65|       0|               90|                 0|     10.00|      10.25|     NA|          9600|           9840| |       0|FALSE |   69|       0|               90|                 0|     10.25|      10.50|     NA|          9840|          10080| |       0|FALSE |   72|       0|               90|                 0|     10.50|      10.75|     NA|         10080|          10320| |       0|FALSE |   77|       0|               90|                 0|     10.75|      11.00|     NA|         10320|          10560| |       0|FALSE |   65|       0|               90|                 0|     11.00|      11.25|     NA|         10560|          10800| |       0|FALSE |   69|       0|               90|                 0|     11.25|      11.50|     NA|         10800|          11040| |       0|FALSE |   72|       0|               90|                 0|     11.50|      11.75|     NA|         11040|          11280| |       0|FALSE |   77|       0|               90|                 0|     11.75|      12.00|     NA|         11280|          11520| |       0|FALSE |   67|       0|               90|                 0|     12.00|      12.25|     NA|         11520|          11760| |       0|FALSE |   71|       0|               90|                 0|     12.25|      12.50|     NA|         11760|          12000| |       0|FALSE |   74|       0|               90|                 0|     12.50|      12.75|     NA|         12000|          12240| |       0|FALSE |   79|       0|               90|                 0|     12.75|      13.00|     NA|         12240|          12480| |       0|FALSE |   67|       0|               90|                 0|     13.00|      13.25|     NA|         12480|          12720| |       0|FALSE |   71|       0|               90|                 0|     13.25|      13.50|     NA|         12720|          12960| |       0|FALSE |   74|       0|               90|                 0|     13.50|      13.75|     NA|         12960|          13200| |       0|FALSE |   79|       0|               90|                 0|     13.75|      14.00|     NA|         13200|          13440| |       0|FALSE |   67|       0|               90|                 0|     14.00|      14.25|     NA|         13440|          13680| |       0|FALSE |   71|       0|               90|                 0|     14.25|      14.50|     NA|         13680|          13920| |       0|FALSE |   74|       0|               90|                 0|     14.50|      14.75|     NA|         13920|          14160| |       0|FALSE |   79|       0|               90|                 0|     14.75|      15.00|     NA|         14160|          14400| |       0|FALSE |   67|       0|               90|                 0|     15.00|      15.25|     NA|         14400|          14640| |       0|FALSE |   71|       0|               90|                 0|     15.25|      15.50|     NA|         14640|          14880| |       0|FALSE |   74|       0|               90|                 0|     15.50|      15.75|     NA|         14880|          15120| |       0|FALSE |   79|       0|               90|                 0|     15.75|      16.00|     NA|         15120|          15360| |       0|FALSE |   36|       9|              100|                 0|      0.00|       0.50|      1|             0|            480| |       0|FALSE |   38|       9|              100|                 0|      1.00|       1.50|      2|           960|           1440| |       0|FALSE |   36|       9|              100|                 0|      2.00|       2.50|      3|          1920|           2400| |       0|FALSE |   38|       9|              100|                 0|      3.00|       3.50|      4|          2880|           3360| |       0|FALSE |   36|       9|              100|                 0|      4.00|       4.50|      5|          3840|           4320| |       0|FALSE |   38|       9|              100|                 0|      5.00|       5.50|      6|          4800|           5280| |       0|FALSE |   36|       9|              100|                 0|      6.00|       6.50|      7|          5760|           6240| |       0|FALSE |   38|       9|              100|                 0|      7.00|       7.50|      8|          6720|           7200| |       0|FALSE |   36|       9|              100|                 0|      8.00|       8.50|      9|          7680|           8160| |       0|FALSE |   38|       9|              100|                 0|      9.00|       9.50|     10|          8640|           9120| |       0|FALSE |   36|       9|              100|                 0|     10.00|      10.50|     11|          9600|          10080| |       0|FALSE |   38|       9|              100|                 0|     11.00|      11.50|     12|         10560|          11040| |       0|FALSE |   36|       9|              100|                 0|     12.00|      12.50|     13|         11520|          12000| |       0|FALSE |   38|       9|              100|                 0|     13.00|      13.50|     14|         12480|          12960| |       0|FALSE |   36|       9|              100|                 0|     14.00|      14.50|     15|         13440|          13920| |       0|FALSE |   38|       9|              100|                 0|     15.00|      15.50|     16|         14400|          14880| mfr$update_notes_wide(combination) mfr$play(\"combination.mp3\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/compose.html","id":"combine-parts","dir":"Articles","previous_headings":"","what":"Combine parts","title":"Composing from R","text":"vignette(\"pyramidi\", package = \"pyramidi\") example accumulate() can generate multiple midifiles successively adding modifications data. Now also successively add parts together, midifile. , let‚Äôs first generate list midi frames, step accumulative former results added new:  parts start time 0. order make parts start one one another, need shift time. following code . Let‚Äôs listen first composition R:","code":"(part_names <- c(\"drum\", \"bass\", \"chords\", \"arp\") %>% accumulate(paste, sep = \" + \")) #> [1] \"drum\"                       \"drum + bass\"                #> [3] \"drum + bass + chords\"       \"drum + bass + chords + arp\" augmentation <- list(   drum,   chords %>% change_notes_on_measures(),   bass %>% change_notes_on_measures(),   arp %>% change_notes_on_measures() ) %>%    accumulate(full_join) %>%    set_names(part_names) #> Joining with `by = join_by(i_track, meta, note, channel, velocity_note_on, #> velocity_note_off, b_note_on, b_note_off)` #> Joining with `by = join_by(i_track, meta, note, channel, velocity_note_on, #> velocity_note_off, b_note_on, b_note_off)` #> Joining with `by = join_by(i_track, meta, note, channel, velocity_note_on, #> velocity_note_off, b_note_on, b_note_off)` augmentation $drum ‚Ä©[38;5;246m# A tibble: 16 √ó 9‚Ä©[39m    i_track meta   note channel i_note velocity_note_on velocity_note_off      ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<lgl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m   ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m  ‚Ä©[3m‚Ä©[38;5;246m<int>‚Ä©[39m‚Ä©[23m            ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m             ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[38;5;250m 1‚Ä©[39m       0 FALSE    36       9      1              100                 0 ‚Ä©[38;5;250m 2‚Ä©[39m       0 FALSE    38       9      2              100                 0 ‚Ä©[38;5;250m 3‚Ä©[39m       0 FALSE    36       9      3              100                 0 ‚Ä©[38;5;250m 4‚Ä©[39m       0 FALSE    38       9      4              100                 0 ‚Ä©[38;5;250m 5‚Ä©[39m       0 FALSE    36       9      5              100                 0 ‚Ä©[38;5;250m 6‚Ä©[39m       0 FALSE    38       9      6              100                 0 ‚Ä©[38;5;250m 7‚Ä©[39m       0 FALSE    36       9      7              100                 0 ‚Ä©[38;5;250m 8‚Ä©[39m       0 FALSE    38       9      8              100                 0 ‚Ä©[38;5;250m 9‚Ä©[39m       0 FALSE    36       9      9              100                 0 ‚Ä©[38;5;250m10‚Ä©[39m       0 FALSE    38       9     10              100                 0 ‚Ä©[38;5;250m11‚Ä©[39m       0 FALSE    36       9     11              100                 0 ‚Ä©[38;5;250m12‚Ä©[39m       0 FALSE    38       9     12              100                 0 ‚Ä©[38;5;250m13‚Ä©[39m       0 FALSE    36       9     13              100                 0 ‚Ä©[38;5;250m14‚Ä©[39m       0 FALSE    38       9     14              100                 0 ‚Ä©[38;5;250m15‚Ä©[39m       0 FALSE    36       9     15              100                 0 ‚Ä©[38;5;250m16‚Ä©[39m       0 FALSE    38       9     16              100                 0 ‚Ä©[38;5;246m# ‚Ñπ 2 more variables: b_note_on <int>, b_note_off <dbl>‚Ä©[39m  $`drum + bass` ‚Ä©[38;5;246m# A tibble: 80 √ó 9‚Ä©[39m    i_track meta   note channel i_note velocity_note_on velocity_note_off      ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<lgl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m   ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m  ‚Ä©[3m‚Ä©[38;5;246m<int>‚Ä©[39m‚Ä©[23m            ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m             ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[38;5;250m 1‚Ä©[39m       0 FALSE    36       9      1              100                 0 ‚Ä©[38;5;250m 2‚Ä©[39m       0 FALSE    38       9      2              100                 0 ‚Ä©[38;5;250m 3‚Ä©[39m       0 FALSE    36       9      3              100                 0 ‚Ä©[38;5;250m 4‚Ä©[39m       0 FALSE    38       9      4              100                 0 ‚Ä©[38;5;250m 5‚Ä©[39m       0 FALSE    36       9      5              100                 0 ‚Ä©[38;5;250m 6‚Ä©[39m       0 FALSE    38       9      6              100                 0 ‚Ä©[38;5;250m 7‚Ä©[39m       0 FALSE    36       9      7              100                 0 ‚Ä©[38;5;250m 8‚Ä©[39m       0 FALSE    38       9      8              100                 0 ‚Ä©[38;5;250m 9‚Ä©[39m       0 FALSE    36       9      9              100                 0 ‚Ä©[38;5;250m10‚Ä©[39m       0 FALSE    38       9     10              100                 0 ‚Ä©[38;5;246m# ‚Ñπ 70 more rows‚Ä©[39m ‚Ä©[38;5;246m# ‚Ñπ 2 more variables: b_note_on <dbl>, b_note_off <dbl>‚Ä©[39m  $`drum + bass + chords` ‚Ä©[38;5;246m# A tibble: 96 √ó 9‚Ä©[39m    i_track meta   note channel i_note velocity_note_on velocity_note_off      ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<lgl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m   ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m  ‚Ä©[3m‚Ä©[38;5;246m<int>‚Ä©[39m‚Ä©[23m            ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m             ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[38;5;250m 1‚Ä©[39m       0 FALSE    36       9      1              100                 0 ‚Ä©[38;5;250m 2‚Ä©[39m       0 FALSE    38       9      2              100                 0 ‚Ä©[38;5;250m 3‚Ä©[39m       0 FALSE    36       9      3              100                 0 ‚Ä©[38;5;250m 4‚Ä©[39m       0 FALSE    38       9      4              100                 0 ‚Ä©[38;5;250m 5‚Ä©[39m       0 FALSE    36       9      5              100                 0 ‚Ä©[38;5;250m 6‚Ä©[39m       0 FALSE    38       9      6              100                 0 ‚Ä©[38;5;250m 7‚Ä©[39m       0 FALSE    36       9      7              100                 0 ‚Ä©[38;5;250m 8‚Ä©[39m       0 FALSE    38       9      8              100                 0 ‚Ä©[38;5;250m 9‚Ä©[39m       0 FALSE    36       9      9              100                 0 ‚Ä©[38;5;250m10‚Ä©[39m       0 FALSE    38       9     10              100                 0 ‚Ä©[38;5;246m# ‚Ñπ 86 more rows‚Ä©[39m ‚Ä©[38;5;246m# ‚Ñπ 2 more variables: b_note_on <dbl>, b_note_off <dbl>‚Ä©[39m  $`drum + bass + chords + arp` ‚Ä©[38;5;246m# A tibble: 160 √ó 9‚Ä©[39m    i_track meta   note channel i_note velocity_note_on velocity_note_off      ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<lgl>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m   ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m  ‚Ä©[3m‚Ä©[38;5;246m<int>‚Ä©[39m‚Ä©[23m            ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m             ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ‚Ä©[38;5;250m 1‚Ä©[39m       0 FALSE    36       9      1              100                 0 ‚Ä©[38;5;250m 2‚Ä©[39m       0 FALSE    38       9      2              100                 0 ‚Ä©[38;5;250m 3‚Ä©[39m       0 FALSE    36       9      3              100                 0 ‚Ä©[38;5;250m 4‚Ä©[39m       0 FALSE    38       9      4              100                 0 ‚Ä©[38;5;250m 5‚Ä©[39m       0 FALSE    36       9      5              100                 0 ‚Ä©[38;5;250m 6‚Ä©[39m       0 FALSE    38       9      6              100                 0 ‚Ä©[38;5;250m 7‚Ä©[39m       0 FALSE    36       9      7              100                 0 ‚Ä©[38;5;250m 8‚Ä©[39m       0 FALSE    38       9      8              100                 0 ‚Ä©[38;5;250m 9‚Ä©[39m       0 FALSE    36       9      9              100                 0 ‚Ä©[38;5;250m10‚Ä©[39m       0 FALSE    38       9     10              100                 0 ‚Ä©[38;5;246m# ‚Ñπ 150 more rows‚Ä©[39m ‚Ä©[38;5;246m# ‚Ñπ 2 more variables: b_note_on <dbl>, b_note_off <dbl>‚Ä©[39m # after augmenting, we'll add parts subtracting the instruments one after one # another (the rev()erse): composition <- c(augmentation, rev(set_names(augmentation, ~paste0(., \"2\")))) %>%    # put them in one dataframe and modify the starting time of the notes in the parts:   bind_rows(.id = \"part\") %>%    # (we need as_factor() to avoid alphabetical ordering of the parts)   group_by(part = as_factor(part)) %>%    mutate(i_part = cur_group_id()) %>%    ungroup() %>%    mutate_at(c(\"b_note_on\", \"b_note_off\"), ~ . + (i_part - 1) * n_beats) %>%   # remove new columns to have the needed format for midi export:   select(-part, -i_part) %>%    beats_to_ticks() mfr$update_notes_wide(composition) mfr$play(\"composition.mp3\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Usage of pyramidi functions","text":"started write vignette ago, knew object-oriented programming (OOP) R. might interesting don‚Äôt know OOP want learn internals pyramidi. just want see use cases know well R6, vignettes might better place start.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"load-libraries","dir":"Articles","previous_headings":"Introduction","what":"Load libraries","title":"Usage of pyramidi functions","text":"First load libraries:","code":"library(pyramidi) library(dplyr) library(tidyr) library(purrr) library(ggplot2) library(zeallot)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"extract-midi-into-dataframe","dir":"Articles","previous_headings":"Introduction","what":"Extract midi into dataframe","title":"Usage of pyramidi functions","text":"‚Äôll extract information midi file dataframe. ‚Äôll use package internal midi file: Now can load information midifile dataframe: dataframe contains columns track index i_track, meta (whether midi event note event), msg containing named lists midi event information. MidiFile() function mido also yields ticks_per_beat file: miditapyr$unnest_midi() function transforms msg column dataframe wide format, every new column name corresponds names lists msg (like tidyr::unnest_wider()): Except name column seems ","code":"midi_file_str <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\")  midifile <- mido$MidiFile(midi_file_str) ticks_per_beat <- midifile$ticks_per_beat dfc = miditapyr$frame_midi(midifile) head(dfc, 20) #>    i_track  meta                            msg #> 1        0  TRUE    track_name, drum-t1-1-t1, 0 #> 2        0 FALSE          note_on, 0, 43, 72, 9 #> 3        0 FALSE          note_on, 0, 39, 64, 9 #> 4        0 FALSE         note_on, 0, 36, 101, 9 #> 5        0  TRUE           set_tempo, 666666, 0 #> 6        0  TRUE time_signature, 4, 4, 24, 8, 0 #> 7        0 FALSE       note_off, 240, 43, 72, 9 #> 8        0 FALSE         note_off, 0, 39, 64, 9 #> 9        0 FALSE        note_off, 0, 36, 101, 9 #> 10       0 FALSE       note_on, 240, 42, 101, 9 #> 11       0 FALSE         note_on, 0, 38, 101, 9 #> 12       0 FALSE        note_on, 240, 43, 64, 9 #> 13       0 FALSE        note_off, 0, 42, 101, 9 #> 14       0 FALSE        note_off, 0, 38, 101, 9 #> 15       0 FALSE       note_off, 240, 43, 64, 9 #> 16       0 FALSE         note_on, 0, 36, 101, 9 #> 17       0 FALSE      note_off, 240, 36, 101, 9 #> 18       0 FALSE        note_on, 240, 43, 60, 9 #> 19       0 FALSE         note_on, 0, 42, 101, 9 #> 20       0 FALSE       note_off, 240, 43, 60, 9 ticks_per_beat #> [1] 960 df <- miditapyr$unnest_midi(dfc) %>% as_tibble() head(df, 20) #> # A tibble: 20 √ó 13 #>    i_track meta  type        name   time  note velocity channel  tempo numerator #>      <dbl> <lgl> <chr>       <chr> <dbl> <dbl>    <dbl>   <dbl>  <dbl>     <dbl> #>  1       0 TRUE  track_name  drum‚Ä¶     0   NaN      NaN     NaN    NaN       NaN #>  2       0 FALSE note_on     NA        0    43       72       9    NaN       NaN #>  3       0 FALSE note_on     NA        0    39       64       9    NaN       NaN #>  4       0 FALSE note_on     NA        0    36      101       9    NaN       NaN #>  5       0 TRUE  set_tempo   NA        0   NaN      NaN     NaN 666666       NaN #>  6       0 TRUE  time_signa‚Ä¶ NA        0   NaN      NaN     NaN    NaN         4 #>  7       0 FALSE note_off    NA      240    43       72       9    NaN       NaN #>  8       0 FALSE note_off    NA        0    39       64       9    NaN       NaN #>  9       0 FALSE note_off    NA        0    36      101       9    NaN       NaN #> 10       0 FALSE note_on     NA      240    42      101       9    NaN       NaN #> 11       0 FALSE note_on     NA        0    38      101       9    NaN       NaN #> 12       0 FALSE note_on     NA      240    43       64       9    NaN       NaN #> 13       0 FALSE note_off    NA        0    42      101       9    NaN       NaN #> 14       0 FALSE note_off    NA        0    38      101       9    NaN       NaN #> 15       0 FALSE note_off    NA      240    43       64       9    NaN       NaN #> 16       0 FALSE note_on     NA        0    36      101       9    NaN       NaN #> 17       0 FALSE note_off    NA      240    36      101       9    NaN       NaN #> 18       0 FALSE note_on     NA      240    43       60       9    NaN       NaN #> 19       0 FALSE note_on     NA        0    42      101       9    NaN       NaN #> 20       0 FALSE note_off    NA      240    43       60       9    NaN       NaN #> # ‚Ñπ 3 more variables: denominator <dbl>, clocks_per_click <dbl>, #> #   notated_32nd_notes_per_beat <dbl> dfc %>% unnest_wider(msg) #> # A tibble: 268 √ó 13 #>    i_track meta  type        name   time  note velocity channel  tempo numerator #>      <dbl> <lgl> <chr>       <chr> <int> <int>    <int>   <int>  <int>     <int> #>  1       0 TRUE  track_name  drum‚Ä¶     0    NA       NA      NA     NA        NA #>  2       0 FALSE note_on     NA        0    43       72       9     NA        NA #>  3       0 FALSE note_on     NA        0    39       64       9     NA        NA #>  4       0 FALSE note_on     NA        0    36      101       9     NA        NA #>  5       0 TRUE  set_tempo   NA        0    NA       NA      NA 666666        NA #>  6       0 TRUE  time_signa‚Ä¶ NA        0    NA       NA      NA     NA         4 #>  7       0 FALSE note_off    NA      240    43       72       9     NA        NA #>  8       0 FALSE note_off    NA        0    39       64       9     NA        NA #>  9       0 FALSE note_off    NA        0    36      101       9     NA        NA #> 10       0 FALSE note_on     NA      240    42      101       9     NA        NA #> # ‚Ñπ 258 more rows #> # ‚Ñπ 3 more variables: denominator <int>, clocks_per_click <int>, #> #   notated_32nd_notes_per_beat <int>"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"translate-midi-time-information","dir":"Articles","previous_headings":"Introduction","what":"Translate midi time information","title":"Usage of pyramidi functions","text":"midi format, time treated relative increments events (measured ticks). order derive total time passed, can use function tab_measures(): function adds columns: ticks: specifying total ticks passed, t: specifying total time seconds passed, m: specifying total measures (bars) passed, b: specifying total beats passed, i_note: unique ascending index every track midi note midi file.","code":"dfm <- tab_measures(df, ticks_per_beat, c(\"m\", \"b\")) %>%   # create a variable `track` with the track name (in order to have it in the plot below)   mutate(track = ifelse(purrr::map_chr(name, typeof) != \"character\",                          list(NA_character_),                          name)) %>%   unnest(cols = track) %>%    fill(track)  dfm #> # A tibble: 268 √ó 17 #>    i_track meta  type      name   note velocity channel ticks     m     b i_note #>      <dbl> <lgl> <chr>     <chr> <dbl>    <dbl>   <dbl> <dbl> <dbl> <dbl>  <dbl> #>  1       0 TRUE  track_na‚Ä¶ drum‚Ä¶   NaN      NaN     NaN     0  0        0      0 #>  2       0 FALSE note_on   NA       43       72       9     0  0        0      1 #>  3       0 FALSE note_on   NA       39       64       9     0  0        0      1 #>  4       0 FALSE note_on   NA       36      101       9     0  0        0      1 #>  5       0 TRUE  set_tempo NA      NaN      NaN     NaN     0  0        0      0 #>  6       0 TRUE  time_sig‚Ä¶ NA      NaN      NaN     NaN     0  0        0      0 #>  7       0 FALSE note_off  NA       43       72       9   240  0.25     1      1 #>  8       0 FALSE note_off  NA       39       64       9   240  0.25     1      1 #>  9       0 FALSE note_off  NA       36      101       9   240  0.25     1      1 #> 10       0 FALSE note_on   NA       42      101       9   480  0.5      2      1 #> # ‚Ñπ 258 more rows #> # ‚Ñπ 6 more variables: tempo <dbl>, numerator <dbl>, denominator <dbl>, #> #   clocks_per_click <dbl>, notated_32nd_notes_per_beat <dbl>, track <chr>"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"further-processing-of-the-midi-events","dir":"Articles","previous_headings":"Introduction","what":"Further processing of the midi events","title":"Usage of pyramidi functions","text":"can split dataframe two whether events meta :","code":"dfm %>%      miditapyr$split_df() %->% c(df_meta, df_notes) df_meta %>% as_tibble() #> # A tibble: 8 √ó 14 #>   i_track meta  type           name    ticks     m     b i_note  tempo numerator #>     <dbl> <lgl> <chr>          <chr>   <dbl> <dbl> <dbl>  <dbl>  <dbl>     <dbl> #> 1       0 TRUE  track_name     drum-t‚Ä¶     0   0     0        0    NaN       NaN #> 2       0 TRUE  set_tempo      NA          0   0     0        0 666666       NaN #> 3       0 TRUE  time_signature NA          0   0     0        0    NaN         4 #> 4       0 TRUE  end_of_track   NA      15361  16.0  64.0      0    NaN       NaN #> 5       1 TRUE  track_name     Audio+‚Ä¶     0   0     0        0    NaN       NaN #> 6       1 TRUE  end_of_track   NA      15361  16.0  64.0      0    NaN       NaN #> 7       2 TRUE  track_name     Audio+‚Ä¶     0   0     0        0    NaN       NaN #> 8       2 TRUE  end_of_track   NA      15361  16.0  64.0      0    NaN       NaN #> # ‚Ñπ 4 more variables: denominator <dbl>, clocks_per_click <dbl>, #> #   notated_32nd_notes_per_beat <dbl>, track <chr> df_notes %>% as_tibble() #> # A tibble: 260 √ó 11 #>    i_track meta  type      note velocity channel ticks     m     b i_note track  #>      <dbl> <lgl> <chr>    <dbl>    <dbl>   <dbl> <dbl> <dbl> <dbl>  <dbl> <chr>  #>  1       0 FALSE note_on     43       72       9     0  0        0      1 drum-‚Ä¶ #>  2       0 FALSE note_on     39       64       9     0  0        0      1 drum-‚Ä¶ #>  3       0 FALSE note_on     36      101       9     0  0        0      1 drum-‚Ä¶ #>  4       0 FALSE note_off    43       72       9   240  0.25     1      1 drum-‚Ä¶ #>  5       0 FALSE note_off    39       64       9   240  0.25     1      1 drum-‚Ä¶ #>  6       0 FALSE note_off    36      101       9   240  0.25     1      1 drum-‚Ä¶ #>  7       0 FALSE note_on     42      101       9   480  0.5      2      1 drum-‚Ä¶ #>  8       0 FALSE note_on     38      101       9   480  0.5      2      1 drum-‚Ä¶ #>  9       0 FALSE note_on     43       64       9   720  0.75     3      2 drum-‚Ä¶ #> 10       0 FALSE note_off    42      101       9   720  0.75     3      1 drum-‚Ä¶ #> # ‚Ñπ 250 more rows"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"pivot-note-dataframe-to-wide","dir":"Articles","previous_headings":"Introduction","what":"Pivot note dataframe to wide","title":"Usage of pyramidi functions","text":"note midi file characterized note_on note_off event. order generate piano roll plot ggplot2, need tidyr::pivot_wider() events. can done function pivot_wide_notes(): new format, data half number rows. columns m, b, t, ticks, time velocity replaced two columns suffix _note_on _note_off.","code":"df_not_notes <-    df_notes %>%    dplyr::filter(!stringr::str_detect(type, \"^note_o[nf]f?$\"))   df_notes_wide <-   df_notes %>%    dplyr::filter(stringr::str_detect(type, \"^note_o[nf]f?$\")) %>%   # tab_measures(df_meta, df_notes, ticks_per_beat) %>%   pivot_wide_notes() %>%   left_join(pyramidi::midi_defs) #> Joining with `by = join_by(note)` df_notes_wide #> # A tibble: 130 √ó 15 #>    i_track meta   note channel i_note track   velocity_note_on velocity_note_off #>      <dbl> <lgl> <dbl>   <dbl>  <dbl> <chr>              <dbl>             <dbl> #>  1       0 FALSE    43       9      1 drum-t‚Ä¶               72                72 #>  2       0 FALSE    39       9      1 drum-t‚Ä¶               64                64 #>  3       0 FALSE    36       9      1 drum-t‚Ä¶              101               101 #>  4       0 FALSE    42       9      1 drum-t‚Ä¶              101               101 #>  5       0 FALSE    38       9      1 drum-t‚Ä¶              101               101 #>  6       0 FALSE    43       9      2 drum-t‚Ä¶               64                64 #>  7       0 FALSE    36       9      2 drum-t‚Ä¶              101               101 #>  8       0 FALSE    43       9      3 drum-t‚Ä¶               60                60 #>  9       0 FALSE    42       9      2 drum-t‚Ä¶              101               101 #> 10       0 FALSE    43       9      4 drum-t‚Ä¶               60                60 #> # ‚Ñπ 120 more rows #> # ‚Ñπ 7 more variables: ticks_note_on <dbl>, ticks_note_off <dbl>, #> #   m_note_on <dbl>, m_note_off <dbl>, b_note_on <dbl>, b_note_off <dbl>, #> #   note_name <fct>"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"plot-midi-information-in-piano-roll-plot","dir":"Articles","previous_headings":"Introduction","what":"Plot midi information in piano roll plot","title":"Usage of pyramidi functions","text":"Now midi data right format piano roll plot:","code":"df_notes_wide %>%   ggplot() +   geom_segment(     aes(       x = m_note_on,       y = note_name,       xend = m_note_off,       yend = note_name,       color = velocity_note_on     )   ) +   # each midi track is printed into its own facet:   facet_wrap( ~ track,               ncol = 1,               scales = \"free_y\") +    guides(color=guide_colorbar(title=\"Note velocity\")) +   labs(     title = \"Piano roll of the note events in the midi file\",     subtitle = \"Only notes played are shown.\"   ) +   xlab(\"Measures\") +   scale_x_continuous(breaks = seq(0, 16, 4),                      minor_breaks = 0:16) +   scale_colour_gradient() +   theme_minimal()"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"manipulation-of-the-midi-data","dir":"Articles","previous_headings":"Introduction","what":"Manipulation of the midi data","title":"Usage of pyramidi functions","text":"new format also allows easily manipulate midi data. instance, let‚Äôs put volume (called velocity midi) first beat every bar maximum (127), half original value otherwise: Let‚Äôs compare modified value original one: ifelse() statement, modified volume midi notes, depending ‚Äôre first beat measure . possible manipulations instance: Quantization round()ing note_on/note_off times, Chord generation, e.g.¬†applying group_by(floor(m_note_on))-summarize() logic, Arpeggiating chords group_by(floor(m_note_on)) - mutate() logic.","code":"df_notes_wide_mod <- df_notes_wide %>%    mutate(     velocity_note_on = ifelse(       # As it's a 4/4 beat, the first beat of each bar is a multiple of 4:       b_note_on %% 4 == 0,        127,        velocity_note_on / 2     ) ) df_notes_wide %>%    select(b_note_on, velocity_note_on) %>%    bind_cols(     new = df_notes_wide_mod$velocity_note_on   ) #> # A tibble: 130 √ó 3 #>    b_note_on velocity_note_on   new #>        <dbl>            <dbl> <dbl> #>  1         0               72 127   #>  2         0               64 127   #>  3         0              101 127   #>  4         2              101  50.5 #>  5         2              101  50.5 #>  6         3               64  32   #>  7         4              101 127   #>  8         6               60  30   #>  9         6              101  50.5 #> 10         8               60 127   #> # ‚Ñπ 120 more rows"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"pivot-note-data-frame-back-to-long-format","dir":"Articles","previous_headings":"Introduction","what":"Pivot note data frame back to long format","title":"Usage of pyramidi functions","text":"can transform wide midi data back long format:","code":"df_notes_long <- pivot_long_notes(df_notes_wide)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"join-non-note-events","dir":"Articles","previous_headings":"Introduction","what":"Join non note events","title":"Usage of pyramidi functions","text":"can now add non note events: time value midi format given number ticks passed events.","code":"df_midi_out <- merge_midi_frames(df_meta, df_notes_long, df_not_notes)  df_midi_out #> # A tibble: 268 √ó 14 #>    i_track channel  note type  velocity meta  name   tempo numerator denominator #>      <dbl>   <dbl> <dbl> <chr>    <dbl> <lgl> <chr>  <dbl>     <dbl>       <dbl> #>  1       0       9    43 note‚Ä¶       72 FALSE NA        NA        NA          NA #>  2       0       9    39 note‚Ä¶       64 FALSE NA        NA        NA          NA #>  3       0       9    36 note‚Ä¶      101 FALSE NA        NA        NA          NA #>  4       0      NA    NA trac‚Ä¶       NA TRUE  drum‚Ä¶    NaN       NaN         NaN #>  5       0      NA    NA set_‚Ä¶       NA TRUE  NA    666666       NaN         NaN #>  6       0      NA    NA time‚Ä¶       NA TRUE  NA       NaN         4           4 #>  7       0       9    43 note‚Ä¶       72 FALSE NA        NA        NA          NA #>  8       0       9    39 note‚Ä¶       64 FALSE NA        NA        NA          NA #>  9       0       9    36 note‚Ä¶      101 FALSE NA        NA        NA          NA #> 10       0       9    42 note‚Ä¶      101 FALSE NA        NA        NA          NA #> # ‚Ñπ 258 more rows #> # ‚Ñπ 4 more variables: clocks_per_click <dbl>, #> #   notated_32nd_notes_per_beat <dbl>, track <chr>, time <dbl>"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/functions_usage.html","id":"write-midi-dataframe-back-to-a-midi-file","dir":"Articles","previous_headings":"Introduction","what":"Write midi dataframe back to a midi file","title":"Usage of pyramidi functions","text":"Now can transform data back dataframe format one got miditapyr$frame_midi(): can save back midi file:","code":"dfc2 <-   df_midi_out %>%   # When reticulate converts R dataframes to pandas, there are complications   # with character columns containing missing values.   # repair_reticulate_conversion = TRUE, repairs that in the miditapyr python   # code:   miditapyr$nest_midi(repair_reticulate_conversion = TRUE) as_tibble(dfc2) #> # A tibble: 268 √ó 3 #>    i_track meta  msg              #>      <dbl> <lgl> <list>           #>  1       0 FALSE <named list [5]> #>  2       0 FALSE <named list [5]> #>  3       0 FALSE <named list [5]> #>  4       0 TRUE  <named list [4]> #>  5       0 TRUE  <named list [4]> #>  6       0 TRUE  <named list [7]> #>  7       0 FALSE <named list [5]> #>  8       0 FALSE <named list [5]> #>  9       0 FALSE <named list [5]> #> 10       0 FALSE <named list [5]> #> # ‚Ñπ 258 more rows miditapyr$write_midi(dfc2, ticks_per_beat, \"test.mid\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/mido_from_r.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Using mido directly from R","text":"using install_miditapyr(), also install mido dependency miditapyr: Now ‚Äôll load R python mido & miditapyr libraries reticulate::import() function. loading import_builtins() pb allow work python objects R:","code":"pyramidi::install_miditapyr(envname = \"r-reticulate\") #> Using virtual environment 'r-reticulate' ... library(reticulate) library(pyramidi) library(tidyr) library(purrr) library(details) mido <- import(\"mido\") mt <- import(\"miditapyr\") pb <- import_builtins()"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/mido_from_r.html","id":"load-file","dir":"Articles","previous_headings":"","what":"Load file","title":"Using mido directly from R","text":"‚Äôll load midi file included package mido.MidiFile object:  object list object, containing besides meta information multiple MidiTrack()s also lists containing midi event messages.","code":"midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") midi_file <- mido$MidiFile(midi_file_string) midi_file MidiFile(type=1, ticks_per_beat=960, tracks=[   MidiTrack([     MetaMessage('track_name', name='drum-t1-1-t1', time=0),     Message('note_on', channel=9, note=43, velocity=72, time=0),     Message('note_on', channel=9, note=39, velocity=64, time=0),     Message('note_on', channel=9, note=36, velocity=101, time=0),     MetaMessage('set_tempo', tempo=666666, time=0),     MetaMessage('time_signature', numerator=4, denominator=4, clocks_per_click=24, notated_32nd_notes_per_beat=8, time=0),     Message('note_off', channel=9, note=43, velocity=72, time=240),     Message('note_off', channel=9, note=39, velocity=64, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=42, velocity=101, time=240),     Message('note_on', channel=9, note=38, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=64, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=38, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=64, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=240),     Message('note_on', channel=9, note=43, velocity=60, time=240),     Message('note_on', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=60, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=60, time=240),     Message('note_on', channel=9, note=39, velocity=66, time=0),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=60, time=240),     Message('note_off', channel=9, note=39, velocity=66, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=42, velocity=101, time=240),     Message('note_on', channel=9, note=38, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=53, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=38, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=53, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=240),     Message('note_on', channel=9, note=43, velocity=52, time=240),     Message('note_on', channel=9, note=42, velocity=66, time=0),     Message('note_off', channel=9, note=43, velocity=52, time=240),     Message('note_off', channel=9, note=42, velocity=66, time=0),     Message('note_on', channel=9, note=43, velocity=72, time=240),     Message('note_on', channel=9, note=39, velocity=64, time=0),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=72, time=240),     Message('note_off', channel=9, note=39, velocity=64, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=42, velocity=101, time=240),     Message('note_on', channel=9, note=38, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=64, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=38, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=64, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=240),     Message('note_on', channel=9, note=43, velocity=60, time=240),     Message('note_on', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=60, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=60, time=240),     Message('note_on', channel=9, note=39, velocity=66, time=0),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=60, time=240),     Message('note_off', channel=9, note=39, velocity=66, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=42, velocity=101, time=240),     Message('note_on', channel=9, note=38, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=53, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=38, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=53, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=240),     Message('note_on', channel=9, note=43, velocity=52, time=240),     Message('note_on', channel=9, note=42, velocity=66, time=0),     Message('note_off', channel=9, note=43, velocity=52, time=240),     Message('note_off', channel=9, note=42, velocity=66, time=0),     Message('note_on', channel=9, note=43, velocity=72, time=240),     Message('note_on', channel=9, note=39, velocity=64, time=0),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=72, time=240),     Message('note_off', channel=9, note=39, velocity=64, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=42, velocity=101, time=240),     Message('note_on', channel=9, note=38, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=64, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=38, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=64, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=240),     Message('note_on', channel=9, note=43, velocity=60, time=240),     Message('note_on', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=60, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=60, time=240),     Message('note_on', channel=9, note=39, velocity=66, time=0),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=60, time=240),     Message('note_off', channel=9, note=39, velocity=66, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=42, velocity=101, time=240),     Message('note_on', channel=9, note=38, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=53, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=38, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=53, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=240),     Message('note_on', channel=9, note=43, velocity=52, time=240),     Message('note_on', channel=9, note=42, velocity=66, time=0),     Message('note_off', channel=9, note=43, velocity=52, time=240),     Message('note_off', channel=9, note=42, velocity=66, time=0),     Message('note_on', channel=9, note=43, velocity=81, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=81, time=240),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=42, velocity=101, time=240),     Message('note_on', channel=9, note=39, velocity=57, time=0),     Message('note_on', channel=9, note=38, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=60, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=39, velocity=57, time=0),     Message('note_off', channel=9, note=38, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=60, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=240),     Message('note_on', channel=9, note=43, velocity=66, time=240),     Message('note_on', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=66, time=240),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_on', channel=9, note=43, velocity=66, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=43, velocity=66, time=240),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=46, velocity=81, time=240),     Message('note_on', channel=9, note=45, velocity=67, time=0),     Message('note_on', channel=9, note=39, velocity=60, time=0),     Message('note_on', channel=9, note=38, velocity=101, time=0),     Message('note_off', channel=9, note=46, velocity=81, time=240),     Message('note_off', channel=9, note=45, velocity=67, time=0),     Message('note_off', channel=9, note=39, velocity=60, time=0),     Message('note_off', channel=9, note=38, velocity=101, time=0),     Message('note_on', channel=9, note=39, velocity=59, time=240),     Message('note_on', channel=9, note=36, velocity=101, time=0),     Message('note_off', channel=9, note=39, velocity=59, time=240),     Message('note_on', channel=9, note=39, velocity=55, time=0),     Message('note_off', channel=9, note=36, velocity=101, time=0),     Message('note_on', channel=9, note=45, velocity=63, time=240),     Message('note_on', channel=9, note=43, velocity=52, time=0),     Message('note_on', channel=9, note=42, velocity=101, time=0),     Message('note_off', channel=9, note=39, velocity=55, time=0),     Message('note_on', channel=9, note=39, velocity=55, time=0),     Message('note_off', channel=9, note=45, velocity=63, time=240),     Message('note_off', channel=9, note=43, velocity=52, time=0),     Message('note_off', channel=9, note=42, velocity=101, time=0),     Message('note_on', channel=9, note=42, velocity=59, time=0),     Message('note_off', channel=9, note=39, velocity=55, time=0),     Message('note_on', channel=9, note=39, velocity=57, time=0),     Message('note_off', channel=9, note=42, velocity=59, time=240),     Message('note_off', channel=9, note=39, velocity=57, time=0),     MetaMessage('end_of_track', time=1)]),   MidiTrack([     MetaMessage('track_name', name='Audio+MIDI', time=0),     Message('note_on', channel=15, note=50, velocity=82, time=0),     Message('note_off', channel=15, note=50, velocity=82, time=240),     Message('note_on', channel=15, note=45, velocity=85, time=3000),     Message('note_on', channel=15, note=50, velocity=81, time=600),     Message('note_off', channel=15, note=45, velocity=85, time=0),     Message('note_off', channel=15, note=50, velocity=81, time=240),     Message('note_on', channel=15, note=45, velocity=69, time=3120),     Message('note_on', channel=15, note=50, velocity=69, time=480),     Message('note_off', channel=15, note=45, velocity=69, time=0),     Message('note_off', channel=15, note=50, velocity=69, time=360),     Message('note_on', channel=15, note=45, velocity=82, time=2400),     Message('note_off', channel=15, note=45, velocity=82, time=960),     Message('note_on', channel=15, note=50, velocity=72, time=120),     Message('note_off', channel=15, note=50, velocity=72, time=1080),     Message('note_on', channel=15, note=57, velocity=79, time=360),     Message('note_off', channel=15, note=57, velocity=79, time=480),     Message('note_on', channel=15, note=55, velocity=50, time=0),     Message('note_off', channel=15, note=55, velocity=50, time=480),     Message('note_on', channel=15, note=53, velocity=73, time=0),     Message('note_off', channel=15, note=53, velocity=73, time=480),     Message('note_on', channel=15, note=52, velocity=69, time=0),     Message('note_off', channel=15, note=52, velocity=69, time=480),     Message('note_on', channel=15, note=48, velocity=85, time=0),     Message('note_off', channel=15, note=48, velocity=85, time=480),     MetaMessage('end_of_track', time=1)]),   MidiTrack([     MetaMessage('track_name', name='Audio+MIDI 1', time=0),     Message('note_on', channel=15, note=62, velocity=78, time=54),     Message('note_on', channel=15, note=57, velocity=78, time=10),     Message('note_on', channel=15, note=65, velocity=72, time=6),     Message('note_off', channel=15, note=65, velocity=72, time=283),     Message('note_off', channel=15, note=62, velocity=78, time=16),     Message('note_off', channel=15, note=57, velocity=78, time=55),     Message('note_on', channel=15, note=62, velocity=57, time=1049),     Message('note_on', channel=15, note=57, velocity=53, time=9),     Message('note_on', channel=15, note=65, velocity=58, time=8),     Message('note_off', channel=15, note=65, velocity=58, time=1652),     Message('note_off', channel=15, note=62, velocity=57, time=8),     Message('note_off', channel=15, note=57, velocity=53, time=47),     Message('note_on', channel=15, note=62, velocity=61, time=142),     Message('note_on', channel=15, note=57, velocity=53, time=9),     Message('note_on', channel=15, note=65, velocity=58, time=8),     Message('note_off', channel=15, note=62, velocity=61, time=188),     Message('note_off', channel=15, note=65, velocity=58, time=8),     Message('note_off', channel=15, note=57, velocity=53, time=24),     Message('note_on', channel=15, note=62, velocity=47, time=275),     Message('note_on', channel=15, note=57, velocity=42, time=8),     Message('note_on', channel=15, note=65, velocity=46, time=9),     Message('note_off', channel=15, note=65, velocity=46, time=337),     Message('note_off', channel=15, note=62, velocity=47, time=266),     Message('note_off', channel=15, note=57, velocity=42, time=119),     Message('note_on', channel=15, note=62, velocity=56, time=657),     Message('note_on', channel=15, note=57, velocity=53, time=9),     Message('note_on', channel=15, note=65, velocity=58, time=8),     Message('note_off', channel=15, note=65, velocity=58, time=1651),     Message('note_off', channel=15, note=62, velocity=56, time=24),     Message('note_off', channel=15, note=57, velocity=53, time=24),     Message('note_on', channel=15, note=62, velocity=49, time=173),     Message('note_on', channel=15, note=57, velocity=42, time=9),     Message('note_on', channel=15, note=65, velocity=49, time=8),     Message('note_off', channel=15, note=65, velocity=49, time=266),     Message('note_off', channel=15, note=62, velocity=49, time=24),     Message('note_off', channel=15, note=57, velocity=42, time=24),     Message('note_on', channel=15, note=62, velocity=37, time=212),     Message('note_on', channel=15, note=57, velocity=34, time=9),     Message('note_on', channel=15, note=65, velocity=51, time=8),     Message('note_off', channel=15, note=65, velocity=51, time=314),     Message('note_off', channel=15, note=62, velocity=37, time=8),     Message('note_off', channel=15, note=57, velocity=34, time=79),     Message('note_on', channel=15, note=57, velocity=58, time=1018),     Message('note_on', channel=15, note=62, velocity=60, time=8),     Message('note_on', channel=15, note=65, velocity=56, time=8),     Message('note_off', channel=15, note=65, velocity=56, time=1746),     Message('note_off', channel=15, note=62, velocity=60, time=8),     Message('note_off', channel=15, note=57, velocity=58, time=71),     Message('note_on', channel=15, note=62, velocity=50, time=447),     Message('note_on', channel=15, note=57, velocity=40, time=8),     Message('note_on', channel=15, note=65, velocity=52, time=8),     Message('note_off', channel=15, note=62, velocity=50, time=431),     Message('note_off', channel=15, note=65, velocity=52, time=9),     Message('note_off', channel=15, note=57, velocity=40, time=70),     Message('note_on', channel=15, note=62, velocity=63, time=917),     Message('note_on', channel=15, note=59, velocity=69, time=8),     Message('note_on', channel=15, note=67, velocity=58, time=8),     Message('note_off', channel=15, note=62, velocity=63, time=252),     Message('note_off', channel=15, note=67, velocity=58, time=8),     Message('note_off', channel=15, note=59, velocity=69, time=23),     Message('note_on', channel=15, note=59, velocity=58, time=268),     Message('note_on', channel=15, note=62, velocity=58, time=8),     Message('note_on', channel=15, note=67, velocity=58, time=8),     Message('note_off', channel=15, note=62, velocity=58, time=587),     Message('note_off', channel=15, note=67, velocity=58, time=9),     Message('note_off', channel=15, note=59, velocity=58, time=63),     Message('note_on', channel=15, note=59, velocity=52, time=87),     Message('note_on', channel=15, note=67, velocity=60, time=8),     Message('note_on', channel=15, note=62, velocity=65, time=8),     Message('note_off', channel=15, note=62, velocity=65, time=251),     Message('note_off', channel=15, note=67, velocity=60, time=32),     Message('note_off', channel=15, note=59, velocity=52, time=48),     Message('note_on', channel=15, note=59, velocity=57, time=337),     Message('note_on', channel=15, note=62, velocity=60, time=9),     Message('note_on', channel=15, note=67, velocity=57, time=8),     Message('note_off', channel=15, note=62, velocity=60, time=173),     Message('note_off', channel=15, note=59, velocity=57, time=31),     Message('note_off', channel=15, note=67, velocity=57, time=9),     Message('note_on', channel=15, note=62, velocity=82, time=266),     Message('note_off', channel=15, note=62, velocity=82, time=5),     MetaMessage('end_of_track', time=1)]) ])"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/mido_from_r.html","id":"transform-to-unnested-dataframe","dir":"Articles","previous_headings":"","what":"Transform to unnested dataframe","title":"Using mido directly from R","text":"can transform midi data data.frame similar one returned unnest_midi() miditapyr package. ‚Äôll use data first track midi file:  list contains mido Message() & MetaMessage() objects (Message()s seem special print method). function pb$vars() can extract variables every event list named R lists:  can put list message lists dataframe write values key column:","code":"# access first track: track1 <- midi_file$tracks[[1]] # transform MidiTrack() object to an R list of mido Message()s and MetaMessage()s: track1list <- pb$list(track1) track1list [[1]] MetaMessage('track_name', name='drum-t1-1-t1', time=0)  [[2]] Message('note_on', channel=9, note=43, velocity=72, time=0)  [[3]] Message('note_on', channel=9, note=39, velocity=64, time=0)  [[4]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[5]] MetaMessage('set_tempo', tempo=666666, time=0)  [[6]] MetaMessage('time_signature', numerator=4, denominator=4, clocks_per_click=24, notated_32nd_notes_per_beat=8, time=0)  [[7]] Message('note_off', channel=9, note=43, velocity=72, time=240)  [[8]] Message('note_off', channel=9, note=39, velocity=64, time=0)  [[9]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[10]] Message('note_on', channel=9, note=42, velocity=101, time=240)  [[11]] Message('note_on', channel=9, note=38, velocity=101, time=0)  [[12]] Message('note_on', channel=9, note=43, velocity=64, time=240)  [[13]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[14]] Message('note_off', channel=9, note=38, velocity=101, time=0)  [[15]] Message('note_off', channel=9, note=43, velocity=64, time=240)  [[16]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[17]] Message('note_off', channel=9, note=36, velocity=101, time=240)  [[18]] Message('note_on', channel=9, note=43, velocity=60, time=240)  [[19]] Message('note_on', channel=9, note=42, velocity=101, time=0)  [[20]] Message('note_off', channel=9, note=43, velocity=60, time=240)  [[21]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[22]] Message('note_on', channel=9, note=43, velocity=60, time=240)  [[23]] Message('note_on', channel=9, note=39, velocity=66, time=0)  [[24]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[25]] Message('note_off', channel=9, note=43, velocity=60, time=240)  [[26]] Message('note_off', channel=9, note=39, velocity=66, time=0)  [[27]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[28]] Message('note_on', channel=9, note=42, velocity=101, time=240)  [[29]] Message('note_on', channel=9, note=38, velocity=101, time=0)  [[30]] Message('note_on', channel=9, note=43, velocity=53, time=240)  [[31]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[32]] Message('note_off', channel=9, note=38, velocity=101, time=0)  [[33]] Message('note_off', channel=9, note=43, velocity=53, time=240)  [[34]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[35]] Message('note_off', channel=9, note=36, velocity=101, time=240)  [[36]] Message('note_on', channel=9, note=43, velocity=52, time=240)  [[37]] Message('note_on', channel=9, note=42, velocity=66, time=0)  [[38]] Message('note_off', channel=9, note=43, velocity=52, time=240)  [[39]] Message('note_off', channel=9, note=42, velocity=66, time=0)  [[40]] Message('note_on', channel=9, note=43, velocity=72, time=240)  [[41]] Message('note_on', channel=9, note=39, velocity=64, time=0)  [[42]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[43]] Message('note_off', channel=9, note=43, velocity=72, time=240)  [[44]] Message('note_off', channel=9, note=39, velocity=64, time=0)  [[45]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[46]] Message('note_on', channel=9, note=42, velocity=101, time=240)  [[47]] Message('note_on', channel=9, note=38, velocity=101, time=0)  [[48]] Message('note_on', channel=9, note=43, velocity=64, time=240)  [[49]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[50]] Message('note_off', channel=9, note=38, velocity=101, time=0)  [[51]] Message('note_off', channel=9, note=43, velocity=64, time=240)  [[52]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[53]] Message('note_off', channel=9, note=36, velocity=101, time=240)  [[54]] Message('note_on', channel=9, note=43, velocity=60, time=240)  [[55]] Message('note_on', channel=9, note=42, velocity=101, time=0)  [[56]] Message('note_off', channel=9, note=43, velocity=60, time=240)  [[57]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[58]] Message('note_on', channel=9, note=43, velocity=60, time=240)  [[59]] Message('note_on', channel=9, note=39, velocity=66, time=0)  [[60]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[61]] Message('note_off', channel=9, note=43, velocity=60, time=240)  [[62]] Message('note_off', channel=9, note=39, velocity=66, time=0)  [[63]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[64]] Message('note_on', channel=9, note=42, velocity=101, time=240)  [[65]] Message('note_on', channel=9, note=38, velocity=101, time=0)  [[66]] Message('note_on', channel=9, note=43, velocity=53, time=240)  [[67]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[68]] Message('note_off', channel=9, note=38, velocity=101, time=0)  [[69]] Message('note_off', channel=9, note=43, velocity=53, time=240)  [[70]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[71]] Message('note_off', channel=9, note=36, velocity=101, time=240)  [[72]] Message('note_on', channel=9, note=43, velocity=52, time=240)  [[73]] Message('note_on', channel=9, note=42, velocity=66, time=0)  [[74]] Message('note_off', channel=9, note=43, velocity=52, time=240)  [[75]] Message('note_off', channel=9, note=42, velocity=66, time=0)  [[76]] Message('note_on', channel=9, note=43, velocity=72, time=240)  [[77]] Message('note_on', channel=9, note=39, velocity=64, time=0)  [[78]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[79]] Message('note_off', channel=9, note=43, velocity=72, time=240)  [[80]] Message('note_off', channel=9, note=39, velocity=64, time=0)  [[81]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[82]] Message('note_on', channel=9, note=42, velocity=101, time=240)  [[83]] Message('note_on', channel=9, note=38, velocity=101, time=0)  [[84]] Message('note_on', channel=9, note=43, velocity=64, time=240)  [[85]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[86]] Message('note_off', channel=9, note=38, velocity=101, time=0)  [[87]] Message('note_off', channel=9, note=43, velocity=64, time=240)  [[88]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[89]] Message('note_off', channel=9, note=36, velocity=101, time=240)  [[90]] Message('note_on', channel=9, note=43, velocity=60, time=240)  [[91]] Message('note_on', channel=9, note=42, velocity=101, time=0)  [[92]] Message('note_off', channel=9, note=43, velocity=60, time=240)  [[93]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[94]] Message('note_on', channel=9, note=43, velocity=60, time=240)  [[95]] Message('note_on', channel=9, note=39, velocity=66, time=0)  [[96]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[97]] Message('note_off', channel=9, note=43, velocity=60, time=240)  [[98]] Message('note_off', channel=9, note=39, velocity=66, time=0)  [[99]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[100]] Message('note_on', channel=9, note=42, velocity=101, time=240)  [[101]] Message('note_on', channel=9, note=38, velocity=101, time=0)  [[102]] Message('note_on', channel=9, note=43, velocity=53, time=240)  [[103]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[104]] Message('note_off', channel=9, note=38, velocity=101, time=0)  [[105]] Message('note_off', channel=9, note=43, velocity=53, time=240)  [[106]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[107]] Message('note_off', channel=9, note=36, velocity=101, time=240)  [[108]] Message('note_on', channel=9, note=43, velocity=52, time=240)  [[109]] Message('note_on', channel=9, note=42, velocity=66, time=0)  [[110]] Message('note_off', channel=9, note=43, velocity=52, time=240)  [[111]] Message('note_off', channel=9, note=42, velocity=66, time=0)  [[112]] Message('note_on', channel=9, note=43, velocity=81, time=240)  [[113]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[114]] Message('note_off', channel=9, note=43, velocity=81, time=240)  [[115]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[116]] Message('note_on', channel=9, note=42, velocity=101, time=240)  [[117]] Message('note_on', channel=9, note=39, velocity=57, time=0)  [[118]] Message('note_on', channel=9, note=38, velocity=101, time=0)  [[119]] Message('note_on', channel=9, note=43, velocity=60, time=240)  [[120]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[121]] Message('note_off', channel=9, note=39, velocity=57, time=0)  [[122]] Message('note_off', channel=9, note=38, velocity=101, time=0)  [[123]] Message('note_off', channel=9, note=43, velocity=60, time=240)  [[124]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[125]] Message('note_off', channel=9, note=36, velocity=101, time=240)  [[126]] Message('note_on', channel=9, note=43, velocity=66, time=240)  [[127]] Message('note_on', channel=9, note=42, velocity=101, time=0)  [[128]] Message('note_off', channel=9, note=43, velocity=66, time=240)  [[129]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[130]] Message('note_on', channel=9, note=43, velocity=66, time=240)  [[131]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[132]] Message('note_off', channel=9, note=43, velocity=66, time=240)  [[133]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[134]] Message('note_on', channel=9, note=46, velocity=81, time=240)  [[135]] Message('note_on', channel=9, note=45, velocity=67, time=0)  [[136]] Message('note_on', channel=9, note=39, velocity=60, time=0)  [[137]] Message('note_on', channel=9, note=38, velocity=101, time=0)  [[138]] Message('note_off', channel=9, note=46, velocity=81, time=240)  [[139]] Message('note_off', channel=9, note=45, velocity=67, time=0)  [[140]] Message('note_off', channel=9, note=39, velocity=60, time=0)  [[141]] Message('note_off', channel=9, note=38, velocity=101, time=0)  [[142]] Message('note_on', channel=9, note=39, velocity=59, time=240)  [[143]] Message('note_on', channel=9, note=36, velocity=101, time=0)  [[144]] Message('note_off', channel=9, note=39, velocity=59, time=240)  [[145]] Message('note_on', channel=9, note=39, velocity=55, time=0)  [[146]] Message('note_off', channel=9, note=36, velocity=101, time=0)  [[147]] Message('note_on', channel=9, note=45, velocity=63, time=240)  [[148]] Message('note_on', channel=9, note=43, velocity=52, time=0)  [[149]] Message('note_on', channel=9, note=42, velocity=101, time=0)  [[150]] Message('note_off', channel=9, note=39, velocity=55, time=0)  [[151]] Message('note_on', channel=9, note=39, velocity=55, time=0)  [[152]] Message('note_off', channel=9, note=45, velocity=63, time=240)  [[153]] Message('note_off', channel=9, note=43, velocity=52, time=0)  [[154]] Message('note_off', channel=9, note=42, velocity=101, time=0)  [[155]] Message('note_on', channel=9, note=42, velocity=59, time=0)  [[156]] Message('note_off', channel=9, note=39, velocity=55, time=0)  [[157]] Message('note_on', channel=9, note=39, velocity=57, time=0)  [[158]] Message('note_off', channel=9, note=42, velocity=59, time=240)  [[159]] Message('note_off', channel=9, note=39, velocity=57, time=0)  [[160]] MetaMessage('end_of_track', time=1) track1Rlist <- track1list %>%    map(pb$vars) track1Rlist[1:10] [[1]] [[1]]$type [1] \"track_name\"  [[1]]$name [1] \"drum-t1-1-t1\"  [[1]]$time [1] 0   [[2]] [[2]]$type [1] \"note_on\"  [[2]]$time [1] 0  [[2]]$note [1] 43  [[2]]$velocity [1] 72  [[2]]$channel [1] 9   [[3]] [[3]]$type [1] \"note_on\"  [[3]]$time [1] 0  [[3]]$note [1] 39  [[3]]$velocity [1] 64  [[3]]$channel [1] 9   [[4]] [[4]]$type [1] \"note_on\"  [[4]]$time [1] 0  [[4]]$note [1] 36  [[4]]$velocity [1] 101  [[4]]$channel [1] 9   [[5]] [[5]]$type [1] \"set_tempo\"  [[5]]$tempo [1] 666666  [[5]]$time [1] 0   [[6]] [[6]]$type [1] \"time_signature\"  [[6]]$numerator [1] 4  [[6]]$denominator [1] 4  [[6]]$clocks_per_click [1] 24  [[6]]$notated_32nd_notes_per_beat [1] 8  [[6]]$time [1] 0   [[7]] [[7]]$type [1] \"note_off\"  [[7]]$time [1] 240  [[7]]$note [1] 43  [[7]]$velocity [1] 72  [[7]]$channel [1] 9   [[8]] [[8]]$type [1] \"note_off\"  [[8]]$time [1] 0  [[8]]$note [1] 39  [[8]]$velocity [1] 64  [[8]]$channel [1] 9   [[9]] [[9]]$type [1] \"note_off\"  [[9]]$time [1] 0  [[9]]$note [1] 36  [[9]]$velocity [1] 101  [[9]]$channel [1] 9   [[10]] [[10]]$type [1] \"note_on\"  [[10]]$time [1] 240  [[10]]$note [1] 42  [[10]]$velocity [1] 101  [[10]]$channel [1] 9 track1Rlist %>%    tibble(temp = .) %>%    unnest_wider(temp) #> # A tibble: 160 √ó 11 #>    type          name   time  note velocity channel  tempo numerator denominator #>    <chr>         <chr> <int> <int>    <int>   <int>  <int>     <int>       <int> #>  1 track_name    drum‚Ä¶     0    NA       NA      NA     NA        NA          NA #>  2 note_on       NA        0    43       72       9     NA        NA          NA #>  3 note_on       NA        0    39       64       9     NA        NA          NA #>  4 note_on       NA        0    36      101       9     NA        NA          NA #>  5 set_tempo     NA        0    NA       NA      NA 666666        NA          NA #>  6 time_signatu‚Ä¶ NA        0    NA       NA      NA     NA         4           4 #>  7 note_off      NA      240    43       72       9     NA        NA          NA #>  8 note_off      NA        0    39       64       9     NA        NA          NA #>  9 note_off      NA        0    36      101       9     NA        NA          NA #> 10 note_on       NA      240    42      101       9     NA        NA          NA #> # ‚Ñπ 150 more rows #> # ‚Ñπ 2 more variables: clocks_per_click <int>, notated_32nd_notes_per_beat <int>"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/mido_from_r.html","id":"compare-with-pyramidi","dir":"Articles","previous_headings":"","what":"Compare with pyramidi","title":"Using mido directly from R","text":"comparison, plot results unnest_midi() differences types track1Rlist contains data track 1, can see apart , output .","code":"mfr <- MidiFramer$new(midi_file_string) mt$unnest_midi(dfc = mfr$mf$midi_frame_raw) %>%    as_tibble() #> # A tibble: 268 √ó 13 #>    i_track meta  type        name   time  note velocity channel  tempo numerator #>      <dbl> <lgl> <chr>       <chr> <dbl> <dbl>    <dbl>   <dbl>  <dbl>     <dbl> #>  1       0 TRUE  track_name  drum‚Ä¶     0   NaN      NaN     NaN    NaN       NaN #>  2       0 FALSE note_on     NA        0    43       72       9    NaN       NaN #>  3       0 FALSE note_on     NA        0    39       64       9    NaN       NaN #>  4       0 FALSE note_on     NA        0    36      101       9    NaN       NaN #>  5       0 TRUE  set_tempo   NA        0   NaN      NaN     NaN 666666       NaN #>  6       0 TRUE  time_signa‚Ä¶ NA        0   NaN      NaN     NaN    NaN         4 #>  7       0 FALSE note_off    NA      240    43       72       9    NaN       NaN #>  8       0 FALSE note_off    NA        0    39       64       9    NaN       NaN #>  9       0 FALSE note_off    NA        0    36      101       9    NaN       NaN #> 10       0 FALSE note_on     NA      240    42      101       9    NaN       NaN #> # ‚Ñπ 258 more rows #> # ‚Ñπ 3 more variables: denominator <dbl>, clocks_per_click <dbl>, #> #   notated_32nd_notes_per_beat <dbl>"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Midi manipulation with pyramidi","text":"hopefully everything set correctly, ‚Äôll load libraries.","code":"library(pyramidi) library(dplyr) library(purrr) library(htmltools) library(tibble) library(details)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"midiframer-class","dir":"Articles","previous_headings":"","what":"MidiFramer class","title":"Midi manipulation with pyramidi","text":"class main structure package allowing read midi files, manipulate data, write back disk. can also use generate midi data scratch R.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"generate-midiframer-object","dir":"Articles","previous_headings":"MidiFramer class","what":"Generate MidiFramer object","title":"Midi manipulation with pyramidi","text":"‚Äôll create R6 object class \"MidiFramer\" midi_file_path passing constructor method MidiFramer$new():","code":"midi_file_path <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_path) mfr <MidiFramer>   Public:     clone: function (deep = FALSE)      df_meta: data.frame     df_not_notes: data.frame     df_notes_long: tbl_df, tbl, data.frame     df_notes_wide: tbl_df, tbl, data.frame     dfm: tbl_df, tbl, data.frame     initialize: function (midi_file_string = NULL)      mf: miditapyr.midi_frame.MidiFrames, python.builtin.object     midi_file_string: /home/gspusi/R/x86_64-pc-linux-gnu-library/4.3/pyramidi/ ...     midi_frame_mod: tbl_df, tbl, data.frame     params: list     play: function (audiofile = tempfile(\"mf_out_\", fileext = \".mp3\"),      populate_r_fields: function ()      ticks_per_beat: active binding     update_notes_wide: function (mod)    Private:     deep_clone: function (name, value)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"fields-in-midiframer-objects","dir":"Articles","previous_headings":"MidiFramer class","what":"Fields in MidiFramer objects","title":"Midi manipulation with pyramidi","text":"R6 object contains following fields:  Please refer help(MidiFramer) information class. field mf miditapyr.MidiFrames() object. first element mfr$mf$midi_file, mido midi file object mido message data, 3 dataframes:  mf initialized midi_frame_raw midi_frame_nested$df (except ordering named fields msg column might differ). detailed interactive overview links showing various fields MidiFramer class related calculated see vignette(\"package_workflow\").","code":"enframe(as.list(mfr)) ‚Ä©[38;5;246m# A tibble: 16 √ó 2‚Ä©[39m    name              value                                ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m             ‚Ä©[3m‚Ä©[38;5;246m<list>‚Ä©[39m‚Ä©[23m                            ‚Ä©[38;5;250m 1‚Ä©[39m .__enclos_env__   ‚Ä©[38;5;246m<env>‚Ä©[39m                             ‚Ä©[38;5;250m 2‚Ä©[39m ticks_per_beat    ‚Ä©[38;5;246m<int [1]>‚Ä©[39m                         ‚Ä©[38;5;250m 3‚Ä©[39m params            ‚Ä©[38;5;246m<named list [1]>‚Ä©[39m                  ‚Ä©[38;5;250m 4‚Ä©[39m midi_frame_mod    ‚Ä©[38;5;246m<tibble [268 √ó 13]>‚Ä©[39m               ‚Ä©[38;5;250m 5‚Ä©[39m df_notes_wide     ‚Ä©[38;5;246m<tibble [130 √ó 11]>‚Ä©[39m               ‚Ä©[38;5;250m 6‚Ä©[39m df_not_notes      ‚Ä©[38;5;246m<df [0 √ó 9]>‚Ä©[39m                      ‚Ä©[38;5;250m 7‚Ä©[39m df_meta           ‚Ä©[38;5;246m<df [8 √ó 12]>‚Ä©[39m                     ‚Ä©[38;5;250m 8‚Ä©[39m df_notes_long     ‚Ä©[38;5;246m<tibble [260 √ó 9]>‚Ä©[39m                ‚Ä©[38;5;250m 9‚Ä©[39m dfm               ‚Ä©[38;5;246m<tibble [268 √ó 15]>‚Ä©[39m               ‚Ä©[38;5;250m10‚Ä©[39m mf                ‚Ä©[38;5;246m<miditapyr.midi_frame.MidiFrames>‚Ä©[39m ‚Ä©[38;5;250m11‚Ä©[39m midi_file_string  ‚Ä©[38;5;246m<chr [1]>‚Ä©[39m                         ‚Ä©[38;5;250m12‚Ä©[39m clone             ‚Ä©[38;5;246m<fn>‚Ä©[39m                              ‚Ä©[38;5;250m13‚Ä©[39m play              ‚Ä©[38;5;246m<fn>‚Ä©[39m                              ‚Ä©[38;5;250m14‚Ä©[39m populate_r_fields ‚Ä©[38;5;246m<fn>‚Ä©[39m                              ‚Ä©[38;5;250m15‚Ä©[39m update_notes_wide ‚Ä©[38;5;246m<fn>‚Ä©[39m                              ‚Ä©[38;5;250m16‚Ä©[39m initialize        ‚Ä©[38;5;246m<fn>‚Ä©[39m list(     mfr$mf$midi_frame_raw,     mfr$mf$midi_frame_unnested$df,     mfr$mf$midi_frame_nested$df   ) %>%    map(head, 30) %>%    walk(\\(x) print(knitr::kable(x))) [[1]]    i_track  meta                            msg 1        0  TRUE    track_name, drum-t1-1-t1, 0 2        0 FALSE          note_on, 0, 43, 72, 9 3        0 FALSE          note_on, 0, 39, 64, 9 4        0 FALSE         note_on, 0, 36, 101, 9 5        0  TRUE           set_tempo, 666666, 0 6        0  TRUE time_signature, 4, 4, 24, 8, 0 7        0 FALSE       note_off, 240, 43, 72, 9 8        0 FALSE         note_off, 0, 39, 64, 9 9        0 FALSE        note_off, 0, 36, 101, 9 10       0 FALSE       note_on, 240, 42, 101, 9 11       0 FALSE         note_on, 0, 38, 101, 9 12       0 FALSE        note_on, 240, 43, 64, 9 13       0 FALSE        note_off, 0, 42, 101, 9 14       0 FALSE        note_off, 0, 38, 101, 9 15       0 FALSE       note_off, 240, 43, 64, 9 16       0 FALSE         note_on, 0, 36, 101, 9 17       0 FALSE      note_off, 240, 36, 101, 9 18       0 FALSE        note_on, 240, 43, 60, 9 19       0 FALSE         note_on, 0, 42, 101, 9 20       0 FALSE       note_off, 240, 43, 60, 9 21       0 FALSE        note_off, 0, 42, 101, 9 22       0 FALSE        note_on, 240, 43, 60, 9 23       0 FALSE          note_on, 0, 39, 66, 9 24       0 FALSE         note_on, 0, 36, 101, 9 25       0 FALSE       note_off, 240, 43, 60, 9 26       0 FALSE         note_off, 0, 39, 66, 9 27       0 FALSE        note_off, 0, 36, 101, 9 28       0 FALSE       note_on, 240, 42, 101, 9 29       0 FALSE         note_on, 0, 38, 101, 9 30       0 FALSE        note_on, 240, 43, 53, 9  [[2]]    i_track  meta           type         name time note velocity channel  tempo 1        0  TRUE     track_name drum-t1-1-t1    0  NaN      NaN     NaN    NaN 2        0 FALSE        note_on         <NA>    0   43       72       9    NaN 3        0 FALSE        note_on         <NA>    0   39       64       9    NaN 4        0 FALSE        note_on         <NA>    0   36      101       9    NaN 5        0  TRUE      set_tempo         <NA>    0  NaN      NaN     NaN 666666 6        0  TRUE time_signature         <NA>    0  NaN      NaN     NaN    NaN 7        0 FALSE       note_off         <NA>  240   43       72       9    NaN 8        0 FALSE       note_off         <NA>    0   39       64       9    NaN 9        0 FALSE       note_off         <NA>    0   36      101       9    NaN 10       0 FALSE        note_on         <NA>  240   42      101       9    NaN 11       0 FALSE        note_on         <NA>    0   38      101       9    NaN 12       0 FALSE        note_on         <NA>  240   43       64       9    NaN 13       0 FALSE       note_off         <NA>    0   42      101       9    NaN 14       0 FALSE       note_off         <NA>    0   38      101       9    NaN 15       0 FALSE       note_off         <NA>  240   43       64       9    NaN 16       0 FALSE        note_on         <NA>    0   36      101       9    NaN 17       0 FALSE       note_off         <NA>  240   36      101       9    NaN 18       0 FALSE        note_on         <NA>  240   43       60       9    NaN 19       0 FALSE        note_on         <NA>    0   42      101       9    NaN 20       0 FALSE       note_off         <NA>  240   43       60       9    NaN 21       0 FALSE       note_off         <NA>    0   42      101       9    NaN 22       0 FALSE        note_on         <NA>  240   43       60       9    NaN 23       0 FALSE        note_on         <NA>    0   39       66       9    NaN 24       0 FALSE        note_on         <NA>    0   36      101       9    NaN 25       0 FALSE       note_off         <NA>  240   43       60       9    NaN 26       0 FALSE       note_off         <NA>    0   39       66       9    NaN 27       0 FALSE       note_off         <NA>    0   36      101       9    NaN 28       0 FALSE        note_on         <NA>  240   42      101       9    NaN 29       0 FALSE        note_on         <NA>    0   38      101       9    NaN 30       0 FALSE        note_on         <NA>  240   43       53       9    NaN    numerator denominator clocks_per_click notated_32nd_notes_per_beat 1        NaN         NaN              NaN                         NaN 2        NaN         NaN              NaN                         NaN 3        NaN         NaN              NaN                         NaN 4        NaN         NaN              NaN                         NaN 5        NaN         NaN              NaN                         NaN 6          4           4               24                           8 7        NaN         NaN              NaN                         NaN 8        NaN         NaN              NaN                         NaN 9        NaN         NaN              NaN                         NaN 10       NaN         NaN              NaN                         NaN 11       NaN         NaN              NaN                         NaN 12       NaN         NaN              NaN                         NaN 13       NaN         NaN              NaN                         NaN 14       NaN         NaN              NaN                         NaN 15       NaN         NaN              NaN                         NaN 16       NaN         NaN              NaN                         NaN 17       NaN         NaN              NaN                         NaN 18       NaN         NaN              NaN                         NaN 19       NaN         NaN              NaN                         NaN 20       NaN         NaN              NaN                         NaN 21       NaN         NaN              NaN                         NaN 22       NaN         NaN              NaN                         NaN 23       NaN         NaN              NaN                         NaN 24       NaN         NaN              NaN                         NaN 25       NaN         NaN              NaN                         NaN 26       NaN         NaN              NaN                         NaN 27       NaN         NaN              NaN                         NaN 28       NaN         NaN              NaN                         NaN 29       NaN         NaN              NaN                         NaN 30       NaN         NaN              NaN                         NaN  [[3]]    i_track  meta                            msg 1        0  TRUE    track_name, drum-t1-1-t1, 0 2        0 FALSE          note_on, 0, 43, 72, 9 3        0 FALSE          note_on, 0, 39, 64, 9 4        0 FALSE         note_on, 0, 36, 101, 9 5        0  TRUE           set_tempo, 0, 666666 6        0  TRUE time_signature, 0, 4, 4, 24, 8 7        0 FALSE       note_off, 240, 43, 72, 9 8        0 FALSE         note_off, 0, 39, 64, 9 9        0 FALSE        note_off, 0, 36, 101, 9 10       0 FALSE       note_on, 240, 42, 101, 9 11       0 FALSE         note_on, 0, 38, 101, 9 12       0 FALSE        note_on, 240, 43, 64, 9 13       0 FALSE        note_off, 0, 42, 101, 9 14       0 FALSE        note_off, 0, 38, 101, 9 15       0 FALSE       note_off, 240, 43, 64, 9 16       0 FALSE         note_on, 0, 36, 101, 9 17       0 FALSE      note_off, 240, 36, 101, 9 18       0 FALSE        note_on, 240, 43, 60, 9 19       0 FALSE         note_on, 0, 42, 101, 9 20       0 FALSE       note_off, 240, 43, 60, 9 21       0 FALSE        note_off, 0, 42, 101, 9 22       0 FALSE        note_on, 240, 43, 60, 9 23       0 FALSE          note_on, 0, 39, 66, 9 24       0 FALSE         note_on, 0, 36, 101, 9 25       0 FALSE       note_off, 240, 43, 60, 9 26       0 FALSE         note_off, 0, 39, 66, 9 27       0 FALSE        note_off, 0, 36, 101, 9 28       0 FALSE       note_on, 240, 42, 101, 9 29       0 FALSE         note_on, 0, 38, 101, 9 30       0 FALSE        note_on, 240, 43, 53, 9"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"populating-an-empty-midiframer-object","dir":"Articles","previous_headings":"MidiFramer class","what":"Populating an empty MidiFramer object","title":"Midi manipulation with pyramidi","text":"also achieve result first creating empty MidiFramer object like :  case dataframe fields initialized NULL (None python reticulate also translates NULL R). order load midi file mfr$mf use miditapyr method calc_attributes(): can populate fields mfr MidiFramer method populate_r_fields().","code":"mfr <- MidiFramer$new() mfr <MidiFramer>   Public:     clone: function (deep = FALSE)      df_meta: NULL     df_not_notes: NULL     df_notes_long: NULL     df_notes_wide: NULL     dfm: NULL     initialize: function (midi_file_string = NULL)      mf: miditapyr.midi_frame.MidiFrames, python.builtin.object     midi_file_string: NULL     midi_frame_mod: NULL     params: list     play: function (audiofile = tempfile(\"mf_out_\", fileext = \".mp3\"),      populate_r_fields: function ()      ticks_per_beat: active binding     update_notes_wide: function (mod)    Private:     deep_clone: function (name, value) mfr$mf$calc_attributes(midi_file_path) mfr$populate_r_fields()"},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"modifying-midi-data","dir":"Articles","previous_headings":"Usage","what":"Modifying midi data","title":"Midi manipulation with pyramidi","text":"MidiFramer object, can modify mfr$df_notes_wide, notes note-wise wide format (note_on & note_off events line). Thus don‚Äôt need worry midi events belong together Let‚Äôs look small example. ‚Äôll define function replace every note random midi note 60 & 71: modify notes wide format like : adapt following elements mfr depend mfr$df_notes_wide. call method mfr$update_notes_wide(), depending list elements also automatically updated. data also changed mfr$mf miditapyr MidiFrames object mfr:","code":"mod <- function(dfn, seed) {   n_notes <- sum(!is.na(dfn$note))   dfn %>% mutate(note = ifelse(     !is.na(note),     sample(60:71, n_notes, TRUE),     note   )) } mod(mfr$df_notes_wide) #> # A tibble: 130 √ó 11 #>    i_track meta   note channel i_note velocity_note_on velocity_note_off #>      <dbl> <lgl> <int>   <dbl>  <dbl>            <dbl>             <dbl> #>  1       0 FALSE    67       9      1               72                72 #>  2       0 FALSE    61       9      1               64                64 #>  3       0 FALSE    67       9      1              101               101 #>  4       0 FALSE    71       9      1              101               101 #>  5       0 FALSE    67       9      1              101               101 #>  6       0 FALSE    62       9      2               64                64 #>  7       0 FALSE    61       9      2              101               101 #>  8       0 FALSE    68       9      3               60                60 #>  9       0 FALSE    71       9      2              101               101 #> 10       0 FALSE    60       9      4               60                60 #> # ‚Ñπ 120 more rows #> # ‚Ñπ 4 more variables: ticks_note_on <dbl>, ticks_note_off <dbl>, #> #   b_note_on <dbl>, b_note_off <dbl> # Apply the modification to mfr$df_notes_wide and all depending dataframes: mfr$update_notes_wide(mod) mfr$mf$midi_frame_nested$df %>% head() #>   i_track  meta                            msg #> 1       0 FALSE          9, 68, note_on, 72, 0 #> 2       0 FALSE          9, 69, note_on, 64, 0 #> 3       0 FALSE         9, 65, note_on, 101, 0 #> 4       0  TRUE    track_name, drum-t1-1-t1, 0 #> 5       0  TRUE           set_tempo, 666666, 0 #> 6       0  TRUE time_signature, 4, 4, 24, 8, 0"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"writing-modified-midi-files","dir":"Articles","previous_headings":"Usage","what":"Writing modified midi files","title":"Midi manipulation with pyramidi","text":"Thus can now directly save modifications midi file: extensive less arbitrary demo compose music pyramidi, see vignette(\"compose\").","code":"midifile <- \"mod_test_midi_file.mid\" mfr$mf$write_file(midifile)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"playing-audio","dir":"Articles","previous_headings":"Usage","what":"Playing audio","title":"Midi manipulation with pyramidi","text":"need install fluidsynth computer R package (installed pyramidi) want computer. want produce audio files midi files can synthesize convenience function player() can hear, sample() function mod() changed midi notes randomly. can also listen synthesized files embedding audio player MidiFramer object: using R interactively, directly play generated audio console.","code":"midifile |> player() mfr$play()"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/pyramidi.html","id":"multiple-results","dir":"Articles","previous_headings":"Usage","what":"Multiple results","title":"Midi manipulation with pyramidi","text":"One reasons create package R might help avoid repetitive work. See can use functional programming approaches purrr, generate multiple midi files one call (actually two calls clarity also put one). can also generate list multiple MidiFramer objects (case 2) apply different modifications : want successively add modifications object store intermediate results list, like : Please note made deep copies ($clone(deep = TRUE)) MidiFramer object list l_mfr. Otherwise field python miditapyr.MidiFrames object mf shallow copy. means updates one elements l_mfr (instance l_mfr[[1]]$mf) also change others, references object. can embed multiple audio files rmarkdown document using purrr::imap(): Compared two audio samples Playing audio (), now two different results.","code":"l_mfr <- 1:2 %>%   set_names(paste0(\"test\", ., \".mp3\")) %>%    map(~mfr$clone(deep = TRUE)$update_notes_wide(mod)) l_mfr2 <- 1:2 %>%   set_names(paste0(\"test\", ., \".mp3\")) %>%    accumulate(~.x$clone(deep = TRUE)$update_notes_wide(mod), .init = mfr) tagList(   imap(     l_mfr,      ~ div(       h4(paste(\"audio result\", .y)),       .x$play(audiofile = .y),       # add 2 line breaks to vertically separate a bit:       br(),        br()     )   ) )"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/tuner.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Using the tuneR package","text":"","code":"library(pyramidi) library(zeallot) library(dplyr) library(tidyr) library(ggplot2)"},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/tuner.html","id":"pyramidi","dir":"Articles","previous_headings":"Read midi in unnested format","what":"pyramidi","title":"Using the tuneR package","text":"pyramidi data can loaded unnested dataframe like :","code":"mid_file_str <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mido_mid_file <- mido$MidiFile(mid_file_str) dfc <- miditapyr$frame_midi(mido_mid_file) ticks_per_beat = mido_mid_file$ticks_per_beat df <- dfc %>%   miditapyr$unnest_midi() %>%    as_tibble() df #> # A tibble: 268 √ó 13 #>    i_track meta  type        name   time  note velocity channel  tempo numerator #>      <dbl> <lgl> <chr>       <chr> <dbl> <dbl>    <dbl>   <dbl>  <dbl>     <dbl> #>  1       0 TRUE  track_name  drum‚Ä¶     0   NaN      NaN     NaN    NaN       NaN #>  2       0 FALSE note_on     NA        0    43       72       9    NaN       NaN #>  3       0 FALSE note_on     NA        0    39       64       9    NaN       NaN #>  4       0 FALSE note_on     NA        0    36      101       9    NaN       NaN #>  5       0 TRUE  set_tempo   NA        0   NaN      NaN     NaN 666666       NaN #>  6       0 TRUE  time_signa‚Ä¶ NA        0   NaN      NaN     NaN    NaN         4 #>  7       0 FALSE note_off    NA      240    43       72       9    NaN       NaN #>  8       0 FALSE note_off    NA        0    39       64       9    NaN       NaN #>  9       0 FALSE note_off    NA        0    36      101       9    NaN       NaN #> 10       0 FALSE note_on     NA      240    42      101       9    NaN       NaN #> # ‚Ñπ 258 more rows #> # ‚Ñπ 3 more variables: denominator <dbl>, clocks_per_click <dbl>, #> #   notated_32nd_notes_per_beat <dbl>"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/tuner.html","id":"tuner","dir":"Articles","previous_headings":"Read midi in unnested format","what":"tuneR","title":"Using the tuneR package","text":"tuneR can done file following way: (midi files cleaning code adapted)","code":"df_tuner <- tuneR::readMidi(mid_file_str)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/tuner.html","id":"changing-format-in-tuner-dataframe","dir":"Articles","previous_headings":"Read midi in unnested format","what":"Changing format in tuneR dataframe","title":"Using the tuneR package","text":"make compatible pyramidi","code":"# vector according to which we'll # rename the event types to the names given by mido, cf.: # https://mido.readthedocs.io/en/latest/message_types.html & # https://mido.readthedocs.io/en/latest/meta_message_types.html rename_type_vec <-   c(     \"Set Tempo\"           = \"set_tempo\",     \"Time Signature\"      = \"time_signature\",     \"Note On\"             = \"note_on\",     \"Note Off\"            = \"note_off\",     \"Sequence/Track Name\" = \"track_name\",     \"End of Track\"        = \"end_of_track\",     \"Key Signature\"       = \"key\",     \"Controller\"          = \"control\",     \"Program Change\"      = \"program\",     \"Pitch Bend\"          = \"pitch\"   )   # transform the tuneR data.frame to the pyramidi format : df_tuner_mod <- df_tuner %>%   mutate(event = as.character(event)) %>%   as_tibble() %>%   mutate(meta = !is.na(type)) %>%   select(-type) %>%   rename(type     = event,          note     = parameter1,          velocity = parameter2,          i_track  = track) %>%   mutate(type  = recode(type, !!!rename_type_vec)) %>%   mutate(tempo = ifelse(type == \"set_tempo\", as.integer(parameterMetaSystem), NA)) %>%   mutate(name  = ifelse(type == \"track_name\", parameterMetaSystem, NA)) %>%   mutate(temp  = ifelse(type == \"time_signature\", parameterMetaSystem, NA)) %>%   separate(temp, c(\"numerator\",                     \"denominator\",                     \"clocks_per_click\",                     \"temp1\", \"temp2\",                     \"notated_32nd_notes_per_beat\"),            convert = TRUE) %>%   select(-temp1, -temp2) %>%   arrange(i_track, time) %>%   group_by(i_track) %>%   # calculate time increments instead of total time:   mutate(time = time - lag(time) %>% {.[1] = 0; .}) %>%   ungroup() %>%   mutate_if(is.numeric, ~ifelse(is.na(.), NaN, .)) %>%   mutate(name = ifelse(is.na(name), list(NULL), name)) %>%   # small correction of transforming \"NA\" strings into real NA values:   mutate(name = ifelse(name == \"NA\", NA, name)) %>%   select(-parameterMetaSystem) #> Warning: There was 1 warning in `mutate()`. #> ‚Ñπ In argument: `tempo = ifelse(...)`. #> Caused by warning in `ifelse()`: #> ! NAs introduced by coercion #> Warning: Expected 6 pieces. Additional pieces discarded in 1 rows [6]."},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/tuner.html","id":"translate-to-pyramidi-format","dir":"Articles","previous_headings":"Read midi in unnested format","what":"Translate to pyramidi format","title":"Using the tuneR package","text":"","code":"dfm <- tab_measures(df_tuner_mod, ticks_per_beat)   dfm %>%   split_midi_frame() %->%    c(df_meta, df_not_notes, df_notes_wide)  df_meta <-   df_meta"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/articles/tuner.html","id":"export-midi-file-from-tuner-data","dir":"Articles","previous_headings":"","what":"Export midi file from tuneR data","title":"Using the tuneR package","text":"Now data 3 objects MidiFramer can understand. First let‚Äôs create empty MidiFramer object: ‚Äôll set ticks per beat (see ) First ‚Äôll pass first two dataframes according fields mfr: ‚Äôll add last one method MidiFramer$update_notes_wide(), order pass information fields (particular mfr$mf$midi_frame_nested, can transformed back midi file; see vignette(\"package_workflow\")):","code":"mfr <- MidiFramer$new() mfr$ticks_per_beat <- ticks_per_beat mfr$df_meta <- df_meta mfr$df_not_notes <- df_not_notes mfr$update_notes_wide(df_notes_wide) mfr$mf$write_file(\"round_tripped_midi_file.mid\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Urs Wilke. Author, maintainer.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilke U (2024). pyramidi: Generate Manipulate Midi Data R Data Frames. R package version 0.2, https://urswilke.github.io/pyramidi/, https://github.com/urswilke/pyramidi.","code":"@Manual{,   title = {pyramidi: Generate and Manipulate Midi Data in R Data Frames},   author = {Urs Wilke},   year = {2024},   note = {R package version 0.2, https://urswilke.github.io/pyramidi/},   url = {https://github.com/urswilke/pyramidi}, }"},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Midi Data in R Data Frames","text":"pyramidi experimental package generate / manipulate midi data R. aware lot code ‚Äôve written years ago hurts eyes look now :) Midi data read dataframes, using python package miditapyr hood (uses excellent mido). notes‚Äô midi information (one line per note_on/note_off midi event) translated wide format (one line per note). format facilitates manipulations notes‚Äô data also plotting piano roll plots. Finally, modified dataframes can written back midi files (using miditapyr). Thus, can manipulate intermediate dataframes create midi files R. However, need make sure midi files write can understood softsynth. data yet validated pyramidi, mido (also used write midi files) already catches possible inconsistencies. ‚Äôre new midi, mido‚Äôs documentation might good start.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"new-since-version-02","dir":"","previous_headings":"","what":"New since version 0.2","title":"Midi Data in R Data Frames","text":"midi data can now played live R console generate sound file html audio player knitting rmarkdown documents thanks excellent R packages fluidsynth (see documentation play() method MidiFramer class helper function player() use fluidsynth::midi_convert() synthesize midi wav files (needs fluidsynth installed, understand correctly R )","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Midi Data in R Data Frames","text":"can install pyramidi R-universe : python package miditapyr also needs installed python environment used reticulate. everything works believe , miditapyr automatically installed install pyramidi, soon access module first time. Otherwise, can also install reticulate python environment included helper function: ‚Äôm sure works windows . Perhaps manually configure reticulate environment.","code":"install.packages('pyramidi', repos = c('https://urswilke.r-universe.dev', 'https://cloud.r-project.org')) pip install miditapyr pyramidi::install_miditapyr()"},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"generate-a-midiframer-object","dir":"","previous_headings":"Usage","what":"Generate a MidiFramer object","title":"Midi Data in R Data Frames","text":"can create MidiFramer object passing file path constructor method (new()). object contains midi data various dataframe formats interface miditapyr miditapyr.MidiFrames object mfr$mf. can write midi file resulting MidiFramer object disk:","code":"library(pyramidi) library(dplyr) midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_string) mfr$mf$write_file(\"/path/to/your/midifile.mid\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"modifying-midi-data","dir":"","previous_headings":"Usage","what":"Modifying midi data","title":"Midi Data in R Data Frames","text":"MidiFramer object, can modify mfr$df_notes_wide, notes note-wise wide format (note_on & note_off events line). Thus don‚Äôt need worry midi events belong together Let‚Äôs look small example. ‚Äôll define function replace every note random midi note 60 & 71:: call update_notes_wide() method, midi data mfr updated:","code":"mod <- function(dfn, seed) {   n_notes <- sum(!is.na(dfn$note))   dfn %>% mutate(note = ifelse(     !is.na(note),     sample(60:71, n_notes, TRUE),     note   )) } mfr$update_notes_wide(mod)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"writing-modified-midi-files","dir":"","previous_headings":"Usage","what":"Writing modified midi files","title":"Midi Data in R Data Frames","text":"Thus, can now save modifications midi file:","code":"mfr$mf$write_file(\"mod_test_midi_file.mid\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"synthesizing-and-playing-audio","dir":"","previous_headings":"Usage","what":"Synthesizing and playing audio","title":"Midi Data in R Data Frames","text":"See vignette(\"pyramidi\", package = \"pyramidi\") see can synthesize midi data wav, convert mp3 want, embed player rmarkdown html document *player appears docs. Even sound weird, happy listen package midi file . :)","code":"mfr$play(\"mod_test_midi_file.mp3\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Midi Data in R Data Frames","text":"can find complete online documentation package . See vignette(\"pyramidi\") brief usage introduction manipulate midi data. vignette(\"compose\") shows extended example compose music generate midi files scratch. vignette(\"package_workflow\") shows detail structure MidiFramer class functions pyramidi package. vignette(\"functions_usage\") illustrates low-level functions pyramidi package, MidiFramer objects use hood.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"pyramidi-out-in-the-wild","dir":"","previous_headings":"","what":"pyramidi out in the wild","title":"Midi Data in R Data Frames","text":"see examples pyramidi used midi mangling R dataframes etc. (amongst plenty awesome writings music), please check Matt Crump‚Äôs blog package midiblender!","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"related-r-packages","dir":"","previous_headings":"","what":"Related R packages","title":"Midi Data in R Data Frames","text":"tabr package massive music notation, transcription analysis program allowing create musical scores (using Lilypond). allows read midi files (wrapping tuneR; see ) also export (also using Lilypond). gm package also allows create show musical scores using musescore. also allows export music audio (also using musescore) embed players html documents. noon package wraps node.js libraries can used read live midi input port data. wrote small blog post reading midi port can also done R mido. Interestingly, node.js libraries mido rely C++ library RtMidi. tuneR package can also read midi data. See vignette(\"tuner\"), example can transform tuner format pyramidi format.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/index.html","id":"r-packages-used","dir":"","previous_headings":"","what":"R packages used","title":"Midi Data in R Data Frames","text":"package stands shoulders giants. big thank authors following libraries!","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":null,"dir":"Reference","previous_headings":"","what":"MidiFramer class ‚Äî MidiFramer","title":"MidiFramer class ‚Äî MidiFramer","text":"class MidiFramer can used read midi files dataframes order facilitate manipulate data R. can also create midi data R without reading file. data transformed various formats. One MidiFramer fields MidiFrames object python miditapyr package. method write_file() can used write data back midi file.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MidiFramer class ‚Äî MidiFramer","text":"See vignette(\"pyramidi\") brief usage introduction manipulate midi data. vignette(\"compose\") shows extended example generate midi files scratch. vignette(\"package_workflow\") shows detail structure MidiFramer class. vignette(\"functions_usage\") illustrates low-level functions pyramidi package. MidiFramer objects use hood.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"MidiFramer class ‚Äî MidiFramer","text":"midi_file_string Path midi file. mf miditapyr$MidiFrames object. dfm result tab_measures(). df_notes_long Result pivot_long_notes(). df_meta, df_not_notes, df_notes_wide Results split_midi_frame(). midi_frame_mod Result merge_midi_frames(). params Parameters used internal functions; Named list; params$columns_to_add passed tab_measures(columns_to_add).","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"MidiFramer class ‚Äî MidiFramer","text":"df_meta, df_not_notes, df_notes_wide Results split_midi_frame(). ticks_per_beat Set ticks per beat MidiFrames()$mf$midi_file. value ticks_per_beat passed integer. value passed, field mf$midi_file$ticks_per_beat modified.","code":""},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"MidiFramer class ‚Äî MidiFramer","text":"MidiFramer$new() MidiFramer$update_notes_wide() MidiFramer$populate_r_fields() MidiFramer$play() MidiFramer$clone()","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"MidiFramer class ‚Äî MidiFramer","text":"Initialize MidiFramer object","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"MidiFramer$new(midi_file_string = NULL)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MidiFramer class ‚Äî MidiFramer","text":"midi_file_string Path midi file; NULL (default), empty MidiFramer object created.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"method-update-notes-wide-","dir":"Reference","previous_headings":"","what":"Method update_notes_wide()","title":"MidiFramer class ‚Äî MidiFramer","text":"Update MidiFramer object modified notes","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"MidiFramer$update_notes_wide(mod)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"MidiFramer class ‚Äî MidiFramer","text":"mod Dataframe function returning dataframe format df_notes_wide.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"\\dontrun{ midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_string) # Function to replace every note with a random midi note between 60 & 71: mod <- function(dfn) {   n_notes <- sum(!is.na(dfn$note))   dfn %>% dplyr::mutate(note = ifelse(     !is.na(note),     sample(60:71, n_notes, TRUE),     note   )) } set.seed(123) mfr$update_notes_wide(mod) mfr$play() # You can pass functions to the $update_notes_wide() method (as above), but # you can also modify the dataframe directly and pass it. Therefore, the # following results in the same: set.seed(123) df_mod <- mod(mfr$df_notes_wide) mfr$update_notes_wide(df_mod) mfr$play() }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"method-populate-r-fields-","dir":"Reference","previous_headings":"","what":"Method populate_r_fields()","title":"MidiFramer class ‚Äî MidiFramer","text":"Populate fields MidiFramer object can also used recalculate object's attributes, value params changed (see examples).","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"MidiFramer$populate_r_fields()"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"\\dontrun{ midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_string) mfr$params$columns_to_add <- c(\"m\", \"b\", \"t\", \"time\") mfr$populate_r_fields() }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"method-play-","dir":"Reference","previous_headings":"","what":"Method play()","title":"MidiFramer class ‚Äî MidiFramer","text":"Play midi MidiFramer object. Writes midi file either playing R console (live = TRUE), otherwise (live = FALSE) writes audio file adding html audio player Rmarkdown (/quarto?) document. Calls player() helper function. WARNING: Setting overwrite = TRUE (default!!) DELETE specified audio files!!! (see details )","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"MidiFramer$play(   audiofile = tempfile(\"mf_out_\", fileext = \".mp3\"),   soundfont = fluidsynth::soundfont_path(),   midifile = gsub(\"\\\\....$\", \".mid\", audiofile),   live = interactive(),   verbose = FALSE,   overwrite = TRUE,   ... )"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"MidiFramer class ‚Äî MidiFramer","text":"audiofile Path audiofile synthesized. audiofile type mp3, first synthesized wav, converted mp3 ffmpeg; (character string). soundfont path sf2 sound font (character string); specified, default soundfont fluidsynth package (fluidsynth::soundfont_path()) (downloaded present ) used. midifile Path midi file synthesize ; (character string). live logical; TRUE synthesized midi directly played console. FALSE audio html tag written. generate small audio player knitting Rmd document (probably also Quarto qmd files; check). verbose logical whether print command line output; defaults FALSE overwrite logical; defaults TRUE; file exists overwrite = FALSE, existing files overwritten function errors . ... Arguments passed fluidsynth functions (fluidsynth::midi_play fluidsynth::midi_convert depending value live). @seealso player","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_string) mfr$play() # The play method does basically this: \\dontrun{ midi_out <- \"my_output.mid\" mp3file <- \"test.mp3\" mfr$mf$write_file(midi_out) fluidsynth::midi_convert(midi_out, output = mp3file) # `overwrite` = TRUE overwrites midi_out & mp3file }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"MidiFramer class ‚Äî MidiFramer","text":"objects class cloneable method.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"MidiFramer$clone(deep = FALSE)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"MidiFramer class ‚Äî MidiFramer","text":"deep Whether make deep clone.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/MidiFramer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MidiFramer class ‚Äî MidiFramer","text":"","code":"if (FALSE) { ## Create a MidiFramer object from a midi file: midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") MidiFramer$new(midi_file_string)  ## ------------------------------------------------ ## Create empty MidiFramer object to illustrate ## the use of the `ticks_per_beat` active binding: ## ------------------------------------------------  mfr <- MidiFramer$new() # Print default value of empty MidiFile object: mfr$mf$midi_file$ticks_per_beat # Modify it with the active binding ticks_per_beat: mfr$ticks_per_beat <- 960L # Print it again: mfr$mf$midi_file$ticks_per_beat }  ## ------------------------------------------------ ## Method `MidiFramer$update_notes_wide` ## ------------------------------------------------  if (FALSE) { midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_string) # Function to replace every note with a random midi note between 60 & 71: mod <- function(dfn) {   n_notes <- sum(!is.na(dfn$note))   dfn %>% dplyr::mutate(note = ifelse(     !is.na(note),     sample(60:71, n_notes, TRUE),     note   )) } set.seed(123) mfr$update_notes_wide(mod) mfr$play() # You can pass functions to the $update_notes_wide() method (as above), but # you can also modify the dataframe directly and pass it. Therefore, the # following results in the same: set.seed(123) df_mod <- mod(mfr$df_notes_wide) mfr$update_notes_wide(df_mod) mfr$play() }  ## ------------------------------------------------ ## Method `MidiFramer$populate_r_fields` ## ------------------------------------------------  if (FALSE) { midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_string) mfr$params$columns_to_add <- c(\"m\", \"b\", \"t\", \"time\") mfr$populate_r_fields() }  ## ------------------------------------------------ ## Method `MidiFramer$play` ## ------------------------------------------------  midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mfr <- MidiFramer$new(midi_file_string) #> Warning: internal error -3 in R_decompress1 #> Error in self$populate_r_fields(): lazy-load database '/home/gspusi/R/x86_64-pc-linux-gnu-library/4.3/pyramidi/R/pyramidi.rdb' is corrupt mfr$play() # The play method does basically this: if (FALSE) { midi_out <- \"my_output.mid\" mp3file <- \"test.mp3\" mfr$mf$write_file(midi_out) fluidsynth::midi_convert(midi_out, output = mp3file) # `overwrite` = TRUE overwrites midi_out & mp3file }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/install_miditapyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Install miditapyr python package ‚Äî install_miditapyr","title":"Install miditapyr python package ‚Äî install_miditapyr","text":"Wrapper around reticulate::py_install() install miditapyr python package","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/install_miditapyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install miditapyr python package ‚Äî install_miditapyr","text":"","code":"install_miditapyr(envname = NULL, method = \"auto\", conda = \"auto\", pip = TRUE)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/install_miditapyr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install miditapyr python package ‚Äî install_miditapyr","text":"envname name, full path, environment python packages installed. NULL (default), active environment (RETICULATE_PYTHON_ENV variable) used; unset, \"r-reticulate\" environment used. method Installation method. default, \"auto\" automatically finds method work local environment. Change default force specific installation method. Note \"virtualenv\" method available Windows. conda path conda executable. Use \"auto\" allow reticulate automatically find appropriate conda binary. See Finding Conda details. pip Boolean; use pip package installation? relevant Conda environments used, otherwise packages installed Conda repositories.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/install_miditapyr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install miditapyr python package ‚Äî install_miditapyr","text":"reticulate::py_install(): Linux OS X \"virtualenv\" method used default (\"conda\" used virtualenv available). Windows, \"conda\" method always used.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/merge_midi_frames.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge dataframes transformed back to long format ‚Äî merge_midi_frames","title":"Merge dataframes transformed back to long format ‚Äî merge_midi_frames","text":"Merge dataframes transformed back long format, remove added columns transform right chronological order order replace original midi_frame_unnested object.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/merge_midi_frames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge dataframes transformed back to long format ‚Äî merge_midi_frames","text":"","code":"merge_midi_frames(df_meta, df_notes_long, df_not_notes)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/merge_midi_frames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge dataframes transformed back to long format ‚Äî merge_midi_frames","text":"df_meta, df_notes_long, df_not_notes Dataframes format split_midi_frame().","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/merge_midi_frames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge dataframes transformed back to long format ‚Äî merge_midi_frames","text":"Merges input dataframes, arranges i_track & (absolute) ticks, calculates time (relative ticks since last event).","code":""},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/merge_midi_frames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge dataframes transformed back to long format ‚Äî merge_midi_frames","text":"","code":"if (FALSE) { midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mf <- miditapyr$MidiFrames(midi_file_string)  dfm <- tab_measures(mf$midi_frame_unnested$df, ticks_per_beat = mf$midi_file$ticks_per_beat)  l <- split_midi_frame(dfm)  df_notes_long <- pivot_long_notes(l$df_notes_wide)  merge_midi_frames(l$df_meta, df_notes_long, l$df_not_notes) }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/midi_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of midi notes ‚Äî midi_defs","title":"Table of midi notes ‚Äî midi_defs","text":"table containing midi pitches note names","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/midi_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of midi notes ‚Äî midi_defs","text":"","code":"midi_defs"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/midi_defs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of midi notes ‚Äî midi_defs","text":"data frame 128 rows 2 variables: note integer 0 - 127 containing midi pitches note_name name note octave","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/midi_defs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of midi notes ‚Äî midi_defs","text":"","code":"midi_defs #> # A tibble: 128 √ó 2 #>     note note_name #>    <int> <fct>     #>  1     0 C-1       #>  2     1 C#-1      #>  3     2 D-1       #>  4     3 Eb-1      #>  5     4 E-1       #>  6     5 F-1       #>  7     6 F#-1      #>  8     7 G-1       #>  9     8 G#-1      #> 10     9 A-1       #> # ‚Ñπ 118 more rows"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/miditapyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Miditapyr python module ‚Äî miditapyr","title":"Miditapyr python module ‚Äî miditapyr","text":"Miditapyr python module","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/miditapyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miditapyr python module ‚Äî miditapyr","text":"","code":"miditapyr"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/miditapyr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miditapyr python module ‚Äî miditapyr","text":"object class python.builtin.module (inherits python.builtin.object) length 1.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/miditapyr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miditapyr python module ‚Äî miditapyr","text":"reticulate python module","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/miditapyr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Miditapyr python module ‚Äî miditapyr","text":"","code":"if (FALSE) { midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") miditapyr$MidiFile(midi_file_string) }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/mido.html","id":null,"dir":"Reference","previous_headings":"","what":"Mido python module ‚Äî mido","title":"Mido python module ‚Äî mido","text":"Mido python module","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/mido.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mido python module ‚Äî mido","text":"","code":"mido"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/mido.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mido python module ‚Äî mido","text":"object class python.builtin.module (inherits python.builtin.object) length 1.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/mido.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mido python module ‚Äî mido","text":"reticulate python module","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/mido.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mido python module ‚Äî mido","text":"","code":"if (FALSE) { midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mido$MidiFile(midi_file_string) }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/piano_keys_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of piano keys coordinates ‚Äî piano_keys_coordinates","title":"Table of piano keys coordinates ‚Äî piano_keys_coordinates","text":"table containing piano keys coordinates. piano key centered midi note value represents.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/piano_keys_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of piano keys coordinates ‚Äî piano_keys_coordinates","text":"","code":"piano_keys_coordinates"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/piano_keys_coordinates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of piano keys coordinates ‚Äî piano_keys_coordinates","text":"data frame 127 rows 6 variables: midi integer 0 - 127 containing midi pitches layer integer 1 2 depending whether key white (1) black (2) xmin xmin coordinate key ymin ymin coordinate key xmax xmax coordinate key ymax ymax coordinate key","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/piano_keys_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of piano keys coordinates ‚Äî piano_keys_coordinates","text":"","code":"library(ggplot2) # Print dataframe: piano_keys_coordinates #> # A tibble: 128 √ó 6 #>     midi layer   xmin  ymin  xmax  ymax #>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1     0     1 -0.5   0      1.21     1 #>  2     1     2  0.568 0.333  1.57     1 #>  3     2     1  1.21  0      2.93     1 #>  4     3     2  2.61  0.333  3.61     1 #>  5     4     1  2.93  0      4.64     1 #>  6     5     1  4.64  0      6.36     1 #>  7     6     2  5.63  0.333  6.63     1 #>  8     7     1  6.36  0      8.07     1 #>  9     8     2  7.57  0.333  8.57     1 #> 10     9     1  8.07  0      9.79     1 #> # ‚Ñπ 118 more rows # Plot the keyboard: piano_keys_coordinates %>%   # plot white keys first that they don't cover half of the black keys:   dplyr::arrange(layer) %>%   ggplot(aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax, fill = factor(layer))) +   geom_rect(color = \"black\", show.legend = FALSE) +   scale_fill_manual(values = c(\"#ffffdd\", \"#113300\")) +   coord_fixed(ratio = 10)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_long_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Write note_on and note_off events in two lines (wide to long) ‚Äî pivot_long_notes","title":"Write note_on and note_off events in two lines (wide to long) ‚Äî pivot_long_notes","text":"Write note_on note_off events two lines (wide long)","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_long_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write note_on and note_off events in two lines (wide to long) ‚Äî pivot_long_notes","text":"","code":"pivot_long_notes(df_notes_wide)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_long_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write note_on and note_off events in two lines (wide to long) ‚Äî pivot_long_notes","text":"df_notes_wide notes dataframe wide format","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_long_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write note_on and note_off events in two lines (wide to long) ‚Äî pivot_long_notes","text":"Transforms notes wide dataframe format long format.","code":""},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_long_notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write note_on and note_off events in two lines (wide to long) ‚Äî pivot_long_notes","text":"","code":"if (FALSE) { mid_file_str <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mido_mid_file <- mido$MidiFile(mid_file_str) dfc <- miditapyr$frame_midi(mido_mid_file) ticks_per_beat = mido_mid_file$ticks_per_beat df <- dfc %>%   miditapyr$unnest_midi() } if (FALSE) { dfm <- tab_measures(df, ticks_per_beat) library(zeallot) c(df_meta, df_notes) %<-% miditapyr$split_df(dfm) dfw <- df_notes %>% pivot_wide_notes() dfw %>% pivot_long_notes() }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_wide_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Write note_on and note_off events in the same line (long to wide) ‚Äî pivot_wide_notes","title":"Write note_on and note_off events in the same line (long to wide) ‚Äî pivot_wide_notes","text":"Write note_on note_off events line (long wide)","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_wide_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write note_on and note_off events in the same line (long to wide) ‚Äî pivot_wide_notes","text":"","code":"pivot_wide_notes(df_measures)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_wide_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write note_on and note_off events in the same line (long to wide) ‚Äî pivot_wide_notes","text":"df_measures data.frame resulting miditapyr$mido_midi_df() running tab_measures() (see example)","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_wide_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write note_on and note_off events in the same line (long to wide) ‚Äî pivot_wide_notes","text":"data.frame following columns pivoted wide: c(\"m\", \"b\", \"t\", \"ticks\", \"time\", \"velocity\"). Every column pivoted wide suffix \"_note_on\" & \"_note_off\" showing values original column prefix. See ?tab_measures explanation meaning columns.","code":""},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/pivot_wide_notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write note_on and note_off events in the same line (long to wide) ‚Äî pivot_wide_notes","text":"","code":"if (FALSE) { mid_file_str <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mido_mid_file <- mido$MidiFile(mid_file_str) dfc <- miditapyr$frame_midi(mido_mid_file) ticks_per_beat = mido_mid_file$ticks_per_beat df <- dfc %>%   miditapyr$unnest_midi() } if (FALSE) { dfm <- tab_measures(df, ticks_per_beat) library(zeallot) c(df_meta, df_notes) %<-% miditapyr$split_df(dfm) df_notes %>% pivot_wide_notes() }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/player.html","id":null,"dir":"Reference","previous_headings":"","what":"Play midi file ‚Äî player","title":"Play midi file ‚Äî player","text":"Play midi MidiFramer object. Helper function synthesize midi, either: directly console, generate audio files include small player html documents. helper function also called MidiFramer$play() method. WARNING: Setting overwrite = TRUE (default!!) DELETE specified audio files!!! (see details )","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/player.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Play midi file ‚Äî player","text":"","code":"player(   midifile,   soundfont = fluidsynth::soundfont_path(),   output = gsub(\".mid$\", \".mp3\", midifile),   live = interactive(),   verbose = interactive(),   overwrite = TRUE,   ... )"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/player.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Play midi file ‚Äî player","text":"midifile Path midi file synthesize ; character string. soundfont path sf2 sound font (character string); specified, default soundfont fluidsynth package (fluidsynth::soundfont_path()) (downloaded present ) used. output Path audiofile synthesized. (character string). live logical; TRUE synthesized midi directly played console. FALSE audio html tag written. generate small audio player knitting Rmd document (probably also Quarto qmd files; check). verbose logical whether print command line output; defaults FALSE overwrite logical; defaults TRUE; file exists overwrite = FALSE, existing files overwritten function errors . ... Arguments passed fluidsynth functions (fluidsynth::midi_play fluidsynth::midi_convert depending value live).","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/player.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Play midi file ‚Äî player","text":"live = TRUE, nothing returned. live = FALSE, html audio tag returned render small audio player knitting Rmd document. audio player can play generated output audio file.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/player.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Play midi file ‚Äî player","text":"","code":"midi_file_string <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") midi_file_string |> player() #> Warning: internal error -3 in R_decompress1 #> Error in eval(expr, envir, enclos): lazy-load database '/home/gspusi/R/x86_64-pc-linux-gnu-library/4.3/pyramidi/R/pyramidi.rdb' is corrupt  # The player is a small helper function to do basically this: if (FALSE) { midifile <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mp3file <- \"test.mp3\" fluidsynth::midi_convert(midifile, output = mp3file) # `overwrite` = TRUE overwrites the mp3 file if previously existing. }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/split_midi_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Split unnested midi dataframe into parts ‚Äî split_midi_frame","title":"Split unnested midi dataframe into parts ‚Äî split_midi_frame","text":"Unnested midi frame time data tab_measures() split 3 parts: df_meta: Consisting meta events midi data. df_not_notes: Containing midi events meta note_on note_off. df_notes_wide: note_on note_off events furthermore transformed wide format pivot_note_wide.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/split_midi_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split unnested midi dataframe into parts ‚Äî split_midi_frame","text":"","code":"split_midi_frame(dfm)"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/split_midi_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split unnested midi dataframe into parts ‚Äî split_midi_frame","text":"dfm result tab_measures()","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/split_midi_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split unnested midi dataframe into parts ‚Äî split_midi_frame","text":"df_meta, df_not_notes & df_notes_wide","code":""},{"path":[]},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/split_midi_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split unnested midi dataframe into parts ‚Äî split_midi_frame","text":"","code":"if (FALSE) { mid_file_str <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mido_mid_file <- mido$MidiFile(mid_file_str) dfc <- miditapyr$frame_midi(mido_mid_file) ticks_per_beat = mido_mid_file$ticks_per_beat df <- dfc %>%   miditapyr$unnest_midi() } if (FALSE) { dfm <- tab_measures(df, ticks_per_beat) split_midi_frame(dfm) }"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/tab_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate measure related data in the midi event data ‚Äî tab_measures","title":"Tabulate measure related data in the midi event data ‚Äî tab_measures","text":"function mainly adds ticks absolute value mido's time (measured ticks) every track. Furthermore, absolute time value translated columns beats (quarter notes; \"b\"), measures (bars; \"m\") time seconds (\"t\"). function outputs additional columns specified argument columns_to_add (see details).","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/tab_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate measure related data in the midi event data ‚Äî tab_measures","text":"","code":"tab_measures(df, ticks_per_beat, columns_to_add = \"b\")"},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/tab_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate measure related data in the midi event data ‚Äî tab_measures","text":"df Note event data.frame resulting miditapyr$unnest_midi() ticks_per_beat integer resulting miditapyr$mido_midi_df() columns_to_add Character vector columns added result (see section \"Details\"). Subset c(\"m\", \"b\", \"t\", \"time\").","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/tab_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate measure related data in the midi event data ‚Äî tab_measures","text":"data.frame following columns added: ticks, i_note columns specified columns_to_add.","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/tab_measures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate measure related data in the midi event data ‚Äî tab_measures","text":"function transforms unnested midi frame first transforming midi time (measured ticks passed relative previous event) absolute time every track. Also auxiliary variable i_note added (indexing occurrence note every track). needed allow pivot notes wide format back long pivot_wide_notes() pivot_long_notes(). m: measure (bar) b: beat (quarter note) t: time seconds","code":""},{"path":"https://urswilke.github.io/pyramidi/v0.2.1preview/reference/tab_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate measure related data in the midi event data ‚Äî tab_measures","text":"","code":"if (FALSE) { mid_file_str <- system.file(\"extdata\", \"test_midi_file.mid\", package = \"pyramidi\") mido_mid_file <- mido$MidiFile(mid_file_str) dfc <- miditapyr$frame_midi(mido_mid_file) ticks_per_beat = mido_mid_file$ticks_per_beat df <- dfc %>%   miditapyr$unnest_midi() } if (FALSE) { tab_measures(df, ticks_per_beat) }"}]

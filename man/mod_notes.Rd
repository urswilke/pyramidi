% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/midi_frames.R
\name{mod_notes}
\alias{mod_notes}
\title{Modify notes in wide format and trigger updates of observers}
\usage{
mod_notes(mfr, mod)
}
\arguments{
\item{mfr}{midi_framer object}

\item{mod}{Function modifying or dataframe replacing}
}
\value{
Updated midi_framer object.
}
\description{
For a "midi_framer" object  \code{mfr}, this method replaces
mfr$mf$midi_frame_tidy$midi_frame_tidy, and all other
derived dataframes.
}
\examples{
midi_file_string <- system.file("example_files", "Bass_sample.mid", package="tuneR")
midi_file_string <- system.file("extdata", "test_midi_file.mid", package = "pyramidi")
mfr <- new_midi_framer(midi_file_string)
# Function to replace every note with a random midi note between 60 & 71:
mod <- function(dfn) {
  n_notes <- sum(!is.na(dfn$note))
  dfn \%>\% mutate(note = ifelse(
    !is.na(note),
    sample(60:71, n_notes, TRUE),
    note
  ))
}
# Apply the modification to mfr$df_notes_wide and all depending dataframes:
mfr <- mod_notes(mfr, mod)
# The data has also been changed in `mf` the miditapyr midi_frame object in mfr:
mfr$mf$midi_frame_compact$midi_frame_compact

# You can save the modified midi data back to a file:
mfr$mf$write_file("mod_test_midi_file.mid")
}
